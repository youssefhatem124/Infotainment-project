
infotainment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00001ae4  00001b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  008000e6  008000e6  00001bfe  2**0
                  ALLOC
  3 .stab         000023e8  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013bd  00000000  00000000  00003fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
      8a:	0c 94 70 0d 	jmp	0x1ae0	; 0x1ae0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include"STD_TYPES.h"
#include"Macros.h"
#include"Dio.h"
void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	6a 83       	std	Y+2, r22	; 0x02

	if(PinNum < 8)
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	88 30       	cpi	r24, 0x08	; 8
      a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_WritePin+0x6c>
	{
		if(PinValue)
      a6:	8a 81       	ldd	r24, Y+2	; 0x02
      a8:	88 23       	and	r24, r24
      aa:	a1 f0       	breq	.+40     	; 0xd4 <DIO_WritePin+0x42>
		{
			Set_Bit(PORTA,PinNum);
      ac:	ab e3       	ldi	r26, 0x3B	; 59
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	eb e3       	ldi	r30, 0x3B	; 59
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	48 2f       	mov	r20, r24
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	28 2f       	mov	r18, r24
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	02 2e       	mov	r0, r18
      c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WritePin+0x38>
      c6:	88 0f       	add	r24, r24
      c8:	99 1f       	adc	r25, r25
      ca:	0a 94       	dec	r0
      cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WritePin+0x34>
      ce:	84 2b       	or	r24, r20
      d0:	8c 93       	st	X, r24
      d2:	bc c0       	rjmp	.+376    	; 0x24c <DIO_WritePin+0x1ba>
		}
		else
		{
			Clear_Bit(PORTA,PinNum);
      d4:	ab e3       	ldi	r26, 0x3B	; 59
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	eb e3       	ldi	r30, 0x3B	; 59
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	48 2f       	mov	r20, r24
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	28 2f       	mov	r18, r24
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 2e       	mov	r0, r18
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
      ee:	88 0f       	add	r24, r24
      f0:	99 1f       	adc	r25, r25
      f2:	0a 94       	dec	r0
      f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
      f6:	80 95       	com	r24
      f8:	84 23       	and	r24, r20
      fa:	8c 93       	st	X, r24
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <DIO_WritePin+0x1ba>
		}
	}

	else if(PinNum > 7 && PinNum < 16)
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	88 30       	cpi	r24, 0x08	; 8
     102:	a8 f1       	brcs	.+106    	; 0x16e <DIO_WritePin+0xdc>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	80 31       	cpi	r24, 0x10	; 16
     108:	90 f5       	brcc	.+100    	; 0x16e <DIO_WritePin+0xdc>
	{
		if(PinValue)
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	88 23       	and	r24, r24
     10e:	b9 f0       	breq	.+46     	; 0x13e <DIO_WritePin+0xac>
		{
			Set_Bit(PORTB,(PinNum-8));
     110:	a8 e3       	ldi	r26, 0x38	; 56
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e8 e3       	ldi	r30, 0x38	; 56
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	48 2f       	mov	r20, r24
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	88 2f       	mov	r24, r24
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9c 01       	movw	r18, r24
     124:	28 50       	subi	r18, 0x08	; 8
     126:	30 40       	sbci	r19, 0x00	; 0
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	02 2e       	mov	r0, r18
     12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_WritePin+0xa2>
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	0a 94       	dec	r0
     136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_WritePin+0x9e>
     138:	84 2b       	or	r24, r20
     13a:	8c 93       	st	X, r24
     13c:	87 c0       	rjmp	.+270    	; 0x24c <DIO_WritePin+0x1ba>
		}
		else
		{
			Clear_Bit(PORTB,(PinNum-8));
     13e:	a8 e3       	ldi	r26, 0x38	; 56
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	e8 e3       	ldi	r30, 0x38	; 56
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	48 2f       	mov	r20, r24
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	9c 01       	movw	r18, r24
     152:	28 50       	subi	r18, 0x08	; 8
     154:	30 40       	sbci	r19, 0x00	; 0
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	02 2e       	mov	r0, r18
     15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_WritePin+0xd0>
     15e:	88 0f       	add	r24, r24
     160:	99 1f       	adc	r25, r25
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_WritePin+0xcc>
     166:	80 95       	com	r24
     168:	84 23       	and	r24, r20
     16a:	8c 93       	st	X, r24
     16c:	6f c0       	rjmp	.+222    	; 0x24c <DIO_WritePin+0x1ba>
		}
	}

	else if(PinNum > 15 && PinNum < 24)
     16e:	89 81       	ldd	r24, Y+1	; 0x01
     170:	80 31       	cpi	r24, 0x10	; 16
     172:	a8 f1       	brcs	.+106    	; 0x1de <DIO_WritePin+0x14c>
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 31       	cpi	r24, 0x18	; 24
     178:	90 f5       	brcc	.+100    	; 0x1de <DIO_WritePin+0x14c>
	{
		if(PinValue)
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	88 23       	and	r24, r24
     17e:	b9 f0       	breq	.+46     	; 0x1ae <DIO_WritePin+0x11c>
		{
			Set_Bit(PORTC,(PinNum-16));
     180:	a5 e3       	ldi	r26, 0x35	; 53
     182:	b0 e0       	ldi	r27, 0x00	; 0
     184:	e5 e3       	ldi	r30, 0x35	; 53
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	48 2f       	mov	r20, r24
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	88 2f       	mov	r24, r24
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	9c 01       	movw	r18, r24
     194:	20 51       	subi	r18, 0x10	; 16
     196:	30 40       	sbci	r19, 0x00	; 0
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 2e       	mov	r0, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_WritePin+0x112>
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	0a 94       	dec	r0
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_WritePin+0x10e>
     1a8:	84 2b       	or	r24, r20
     1aa:	8c 93       	st	X, r24
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <DIO_WritePin+0x1ba>
		}
		else
		{
			Clear_Bit(PORTC,(PinNum-16));
     1ae:	a5 e3       	ldi	r26, 0x35	; 53
     1b0:	b0 e0       	ldi	r27, 0x00	; 0
     1b2:	e5 e3       	ldi	r30, 0x35	; 53
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	48 2f       	mov	r20, r24
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	9c 01       	movw	r18, r24
     1c2:	20 51       	subi	r18, 0x10	; 16
     1c4:	30 40       	sbci	r19, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 2e       	mov	r0, r18
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0x140>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	0a 94       	dec	r0
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0x13c>
     1d6:	80 95       	com	r24
     1d8:	84 23       	and	r24, r20
     1da:	8c 93       	st	X, r24
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <DIO_WritePin+0x1ba>
		}
	}

	else if(PinNum > 23 && PinNum < 32)
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	88 31       	cpi	r24, 0x18	; 24
     1e2:	a0 f1       	brcs	.+104    	; 0x24c <DIO_WritePin+0x1ba>
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	80 32       	cpi	r24, 0x20	; 32
     1e8:	88 f5       	brcc	.+98     	; 0x24c <DIO_WritePin+0x1ba>
	{
		if(PinValue)
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	88 23       	and	r24, r24
     1ee:	b9 f0       	breq	.+46     	; 0x21e <DIO_WritePin+0x18c>
		{
			Set_Bit(PORTD,(PinNum-24));
     1f0:	a2 e3       	ldi	r26, 0x32	; 50
     1f2:	b0 e0       	ldi	r27, 0x00	; 0
     1f4:	e2 e3       	ldi	r30, 0x32	; 50
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	80 81       	ld	r24, Z
     1fa:	48 2f       	mov	r20, r24
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	9c 01       	movw	r18, r24
     204:	28 51       	subi	r18, 0x18	; 24
     206:	30 40       	sbci	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x182>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x17e>
     218:	84 2b       	or	r24, r20
     21a:	8c 93       	st	X, r24
     21c:	17 c0       	rjmp	.+46     	; 0x24c <DIO_WritePin+0x1ba>
		}
		else
		{
			Clear_Bit(PORTD,(PinNum-24));
     21e:	a2 e3       	ldi	r26, 0x32	; 50
     220:	b0 e0       	ldi	r27, 0x00	; 0
     222:	e2 e3       	ldi	r30, 0x32	; 50
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	48 2f       	mov	r20, r24
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	9c 01       	movw	r18, r24
     232:	28 51       	subi	r18, 0x18	; 24
     234:	30 40       	sbci	r19, 0x00	; 0
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	02 2e       	mov	r0, r18
     23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePin+0x1b0>
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	0a 94       	dec	r0
     244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePin+0x1ac>
     246:	80 95       	com	r24
     248:	84 23       	and	r24, r20
     24a:	8c 93       	st	X, r24
		}

	}
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
     256:	df 93       	push	r29
     258:	cf 93       	push	r28
     25a:	00 d0       	rcall	.+0      	; 0x25c <DIO_ReadPin+0x6>
     25c:	0f 92       	push	r0
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	89 83       	std	Y+1, r24	; 0x01
	if(PinNum < 8)
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 30       	cpi	r24, 0x08	; 8
     268:	f0 f4       	brcc	.+60     	; 0x2a6 <DIO_ReadPin+0x50>
	{
		return Get_Bit(PINA,PinNum);
     26a:	e9 e3       	ldi	r30, 0x39	; 57
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	48 2f       	mov	r20, r24
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	28 2f       	mov	r18, r24
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_ReadPin+0x2e>
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	2a 95       	dec	r18
     286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_ReadPin+0x2a>
     288:	9a 01       	movw	r18, r20
     28a:	28 23       	and	r18, r24
     28c:	39 23       	and	r19, r25
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	88 2f       	mov	r24, r24
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a9 01       	movw	r20, r18
     296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_ReadPin+0x46>
     298:	55 95       	asr	r21
     29a:	47 95       	ror	r20
     29c:	8a 95       	dec	r24
     29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_ReadPin+0x42>
     2a0:	ca 01       	movw	r24, r20
     2a2:	8a 83       	std	Y+2, r24	; 0x02
     2a4:	79 c0       	rjmp	.+242    	; 0x398 <DIO_ReadPin+0x142>
	}

	else if(PinNum > 7 && PinNum < 16)
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	88 30       	cpi	r24, 0x08	; 8
     2aa:	28 f1       	brcs	.+74     	; 0x2f6 <DIO_ReadPin+0xa0>
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	80 31       	cpi	r24, 0x10	; 16
     2b0:	10 f5       	brcc	.+68     	; 0x2f6 <DIO_ReadPin+0xa0>
	{
		return Get_Bit(PINB,(PinNum-8));
     2b2:	e6 e3       	ldi	r30, 0x36	; 54
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	48 2f       	mov	r20, r24
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	88 2f       	mov	r24, r24
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	9c 01       	movw	r18, r24
     2c4:	28 50       	subi	r18, 0x08	; 8
     2c6:	30 40       	sbci	r19, 0x00	; 0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_ReadPin+0x7c>
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	2a 95       	dec	r18
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_ReadPin+0x78>
     2d6:	9a 01       	movw	r18, r20
     2d8:	28 23       	and	r18, r24
     2da:	39 23       	and	r19, r25
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 97       	sbiw	r24, 0x08	; 8
     2e4:	a9 01       	movw	r20, r18
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_ReadPin+0x96>
     2e8:	55 95       	asr	r21
     2ea:	47 95       	ror	r20
     2ec:	8a 95       	dec	r24
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_ReadPin+0x92>
     2f0:	ca 01       	movw	r24, r20
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	51 c0       	rjmp	.+162    	; 0x398 <DIO_ReadPin+0x142>
	}

	else if(PinNum > 15 && PinNum < 24)
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	80 31       	cpi	r24, 0x10	; 16
     2fa:	28 f1       	brcs	.+74     	; 0x346 <DIO_ReadPin+0xf0>
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	88 31       	cpi	r24, 0x18	; 24
     300:	10 f5       	brcc	.+68     	; 0x346 <DIO_ReadPin+0xf0>
	{
		return Get_Bit(PINC,(PinNum-16));
     302:	e3 e3       	ldi	r30, 0x33	; 51
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	48 2f       	mov	r20, r24
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	89 81       	ldd	r24, Y+1	; 0x01
     30e:	88 2f       	mov	r24, r24
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	9c 01       	movw	r18, r24
     314:	20 51       	subi	r18, 0x10	; 16
     316:	30 40       	sbci	r19, 0x00	; 0
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_ReadPin+0xcc>
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	2a 95       	dec	r18
     324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_ReadPin+0xc8>
     326:	9a 01       	movw	r18, r20
     328:	28 23       	and	r18, r24
     32a:	39 23       	and	r19, r25
     32c:	89 81       	ldd	r24, Y+1	; 0x01
     32e:	88 2f       	mov	r24, r24
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	40 97       	sbiw	r24, 0x10	; 16
     334:	a9 01       	movw	r20, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_ReadPin+0xe6>
     338:	55 95       	asr	r21
     33a:	47 95       	ror	r20
     33c:	8a 95       	dec	r24
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_ReadPin+0xe2>
     340:	ca 01       	movw	r24, r20
     342:	8a 83       	std	Y+2, r24	; 0x02
     344:	29 c0       	rjmp	.+82     	; 0x398 <DIO_ReadPin+0x142>
	}

	else if(PinNum > 23 && PinNum < 32)
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	88 31       	cpi	r24, 0x18	; 24
     34a:	28 f1       	brcs	.+74     	; 0x396 <DIO_ReadPin+0x140>
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	80 32       	cpi	r24, 0x20	; 32
     350:	10 f5       	brcc	.+68     	; 0x396 <DIO_ReadPin+0x140>
	{
		return Get_Bit(PIND,(PinNum-32));
     352:	e0 e3       	ldi	r30, 0x30	; 48
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	48 2f       	mov	r20, r24
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	88 2f       	mov	r24, r24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	9c 01       	movw	r18, r24
     364:	20 52       	subi	r18, 0x20	; 32
     366:	30 40       	sbci	r19, 0x00	; 0
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_ReadPin+0x11c>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	2a 95       	dec	r18
     374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_ReadPin+0x118>
     376:	9a 01       	movw	r18, r20
     378:	28 23       	and	r18, r24
     37a:	39 23       	and	r19, r25
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	88 2f       	mov	r24, r24
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	80 97       	sbiw	r24, 0x20	; 32
     384:	a9 01       	movw	r20, r18
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_ReadPin+0x136>
     388:	55 95       	asr	r21
     38a:	47 95       	ror	r20
     38c:	8a 95       	dec	r24
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_ReadPin+0x132>
     390:	ca 01       	movw	r24, r20
     392:	8a 83       	std	Y+2, r24	; 0x02
     394:	01 c0       	rjmp	.+2      	; 0x398 <DIO_ReadPin+0x142>
     396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_ReadPin+0x146>
	}


}
     398:	5a 81       	ldd	r21, Y+2	; 0x02
     39a:	5b 83       	std	Y+3, r21	; 0x03
     39c:	8b 81       	ldd	r24, Y+3	; 0x03
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum, uint8 PinDirection)
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <DIO_SetPinDirection+0x6>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	89 83       	std	Y+1, r24	; 0x01
     3b6:	6a 83       	std	Y+2, r22	; 0x02

if(PinNum < 8)
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	60 f5       	brcc	.+88     	; 0x416 <DIO_SetPinDirection+0x6c>
{
	if(PinDirection)
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	88 23       	and	r24, r24
     3c2:	a1 f0       	breq	.+40     	; 0x3ec <DIO_SetPinDirection+0x42>
	{
		Set_Bit(DDRA,PinNum);
     3c4:	aa e3       	ldi	r26, 0x3A	; 58
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	ea e3       	ldi	r30, 0x3A	; 58
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	48 2f       	mov	r20, r24
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 2e       	mov	r0, r18
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinDirection+0x38>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	0a 94       	dec	r0
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinDirection+0x34>
     3e6:	84 2b       	or	r24, r20
     3e8:	8c 93       	st	X, r24
     3ea:	bc c0       	rjmp	.+376    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRA,PinNum);
     3ec:	aa e3       	ldi	r26, 0x3A	; 58
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	ea e3       	ldi	r30, 0x3A	; 58
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	48 2f       	mov	r20, r24
     3f8:	89 81       	ldd	r24, Y+1	; 0x01
     3fa:	28 2f       	mov	r18, r24
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	02 2e       	mov	r0, r18
     404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_SetPinDirection+0x60>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	0a 94       	dec	r0
     40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_SetPinDirection+0x5c>
     40e:	80 95       	com	r24
     410:	84 23       	and	r24, r20
     412:	8c 93       	st	X, r24
     414:	a7 c0       	rjmp	.+334    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 7 && PinNum < 16)
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	a8 f1       	brcs	.+106    	; 0x486 <DIO_SetPinDirection+0xdc>
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	80 31       	cpi	r24, 0x10	; 16
     420:	90 f5       	brcc	.+100    	; 0x486 <DIO_SetPinDirection+0xdc>
{
	if(PinDirection)
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	88 23       	and	r24, r24
     426:	b9 f0       	breq	.+46     	; 0x456 <DIO_SetPinDirection+0xac>
	{
		Set_Bit(DDRB,(PinNum)-8);
     428:	a7 e3       	ldi	r26, 0x37	; 55
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e7 e3       	ldi	r30, 0x37	; 55
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	48 2f       	mov	r20, r24
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9c 01       	movw	r18, r24
     43c:	28 50       	subi	r18, 0x08	; 8
     43e:	30 40       	sbci	r19, 0x00	; 0
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	02 2e       	mov	r0, r18
     446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_SetPinDirection+0xa2>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_SetPinDirection+0x9e>
     450:	84 2b       	or	r24, r20
     452:	8c 93       	st	X, r24
     454:	87 c0       	rjmp	.+270    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRB,(PinNum)-8);
     456:	a7 e3       	ldi	r26, 0x37	; 55
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	e7 e3       	ldi	r30, 0x37	; 55
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	48 2f       	mov	r20, r24
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	9c 01       	movw	r18, r24
     46a:	28 50       	subi	r18, 0x08	; 8
     46c:	30 40       	sbci	r19, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 2e       	mov	r0, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_SetPinDirection+0xd0>
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_SetPinDirection+0xcc>
     47e:	80 95       	com	r24
     480:	84 23       	and	r24, r20
     482:	8c 93       	st	X, r24
     484:	6f c0       	rjmp	.+222    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 15 && PinNum < 24)
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	80 31       	cpi	r24, 0x10	; 16
     48a:	a8 f1       	brcs	.+106    	; 0x4f6 <DIO_SetPinDirection+0x14c>
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	88 31       	cpi	r24, 0x18	; 24
     490:	90 f5       	brcc	.+100    	; 0x4f6 <DIO_SetPinDirection+0x14c>
{
	if(PinDirection)
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	88 23       	and	r24, r24
     496:	b9 f0       	breq	.+46     	; 0x4c6 <DIO_SetPinDirection+0x11c>
	{
		Set_Bit(DDRC,(PinNum)-16);
     498:	a4 e3       	ldi	r26, 0x34	; 52
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	e4 e3       	ldi	r30, 0x34	; 52
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	48 2f       	mov	r20, r24
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9c 01       	movw	r18, r24
     4ac:	20 51       	subi	r18, 0x10	; 16
     4ae:	30 40       	sbci	r19, 0x00	; 0
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 2e       	mov	r0, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_SetPinDirection+0x112>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_SetPinDirection+0x10e>
     4c0:	84 2b       	or	r24, r20
     4c2:	8c 93       	st	X, r24
     4c4:	4f c0       	rjmp	.+158    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRC,(PinNum)-16);
     4c6:	a4 e3       	ldi	r26, 0x34	; 52
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	e4 e3       	ldi	r30, 0x34	; 52
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	48 2f       	mov	r20, r24
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	88 2f       	mov	r24, r24
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	9c 01       	movw	r18, r24
     4da:	20 51       	subi	r18, 0x10	; 16
     4dc:	30 40       	sbci	r19, 0x00	; 0
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	02 2e       	mov	r0, r18
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_SetPinDirection+0x140>
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	0a 94       	dec	r0
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_SetPinDirection+0x13c>
     4ee:	80 95       	com	r24
     4f0:	84 23       	and	r24, r20
     4f2:	8c 93       	st	X, r24
     4f4:	37 c0       	rjmp	.+110    	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
}

else if(PinNum > 23 && PinNum < 32)
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 31       	cpi	r24, 0x18	; 24
     4fa:	a0 f1       	brcs	.+104    	; 0x564 <DIO_SetPinDirection+0x1ba>
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	80 32       	cpi	r24, 0x20	; 32
     500:	88 f5       	brcc	.+98     	; 0x564 <DIO_SetPinDirection+0x1ba>
{
	if(PinDirection)
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	88 23       	and	r24, r24
     506:	b9 f0       	breq	.+46     	; 0x536 <DIO_SetPinDirection+0x18c>
	{
		Set_Bit(DDRC,(PinNum)-16);
     508:	a4 e3       	ldi	r26, 0x34	; 52
     50a:	b0 e0       	ldi	r27, 0x00	; 0
     50c:	e4 e3       	ldi	r30, 0x34	; 52
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	48 2f       	mov	r20, r24
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9c 01       	movw	r18, r24
     51c:	20 51       	subi	r18, 0x10	; 16
     51e:	30 40       	sbci	r19, 0x00	; 0
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 2e       	mov	r0, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_SetPinDirection+0x182>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	0a 94       	dec	r0
     52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_SetPinDirection+0x17e>
     530:	84 2b       	or	r24, r20
     532:	8c 93       	st	X, r24
     534:	17 c0       	rjmp	.+46     	; 0x564 <DIO_SetPinDirection+0x1ba>
	}
	else
	{
		Clear_Bit(DDRC,(PinNum)-16);
     536:	a4 e3       	ldi	r26, 0x34	; 52
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	e4 e3       	ldi	r30, 0x34	; 52
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	48 2f       	mov	r20, r24
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9c 01       	movw	r18, r24
     54a:	20 51       	subi	r18, 0x10	; 16
     54c:	30 40       	sbci	r19, 0x00	; 0
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	02 2e       	mov	r0, r18
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_SetPinDirection+0x1b0>
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	0a 94       	dec	r0
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_SetPinDirection+0x1ac>
     55e:	80 95       	com	r24
     560:	84 23       	and	r24, r20
     562:	8c 93       	st	X, r24
	}
}


}
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <TMR_vidInit_ctc>:
#include"os_interface.h"
static void (*OS_CallBackPtr_g)(void) = NULL;
void __vector_10 (void)  __attribute__((signal,__INTR_ATTRS));
/**********Initializing the function in the CTC MODE******/
void TMR_vidInit_ctc(uint16 time)
{
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <TMR_vidInit_ctc+0x6>
     574:	00 d0       	rcall	.+0      	; 0x576 <TMR_vidInit_ctc+0x8>
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=0;
     57e:	e2 e5       	ldi	r30, 0x52	; 82
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	10 82       	st	Z, r1
	switch(time)
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	9c 83       	std	Y+4, r25	; 0x04
     58a:	8b 83       	std	Y+3, r24	; 0x03
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	91 05       	cpc	r25, r1
     594:	31 f0       	breq	.+12     	; 0x5a2 <TMR_vidInit_ctc+0x34>
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	91 05       	cpc	r25, r1
     59e:	31 f0       	breq	.+12     	; 0x5ac <TMR_vidInit_ctc+0x3e>
     5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <TMR_vidInit_ctc+0x46>
	{
	case 1:  OCR0=125;break;
     5a2:	ec e5       	ldi	r30, 0x5C	; 92
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	8d e7       	ldi	r24, 0x7D	; 125
     5a8:	80 83       	st	Z, r24
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <TMR_vidInit_ctc+0x46>
	case 2:  OCR0=250;break;
     5ac:	ec e5       	ldi	r30, 0x5C	; 92
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	8a ef       	ldi	r24, 0xFA	; 250
     5b2:	80 83       	st	Z, r24
	}
	Set_Bit(TCCR0,FOC0);
     5b4:	a3 e5       	ldi	r26, 0x53	; 83
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e3 e5       	ldi	r30, 0x53	; 83
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	80 68       	ori	r24, 0x80	; 128
     5c0:	8c 93       	st	X, r24
	Set_Bit(TCCR0,WGM01);
     5c2:	a3 e5       	ldi	r26, 0x53	; 83
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	e3 e5       	ldi	r30, 0x53	; 83
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	88 60       	ori	r24, 0x08	; 8
     5ce:	8c 93       	st	X, r24
	Set_Bit(TCCR0,CS00);
     5d0:	a3 e5       	ldi	r26, 0x53	; 83
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	e3 e5       	ldi	r30, 0x53	; 83
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	81 60       	ori	r24, 0x01	; 1
     5dc:	8c 93       	st	X, r24
	Set_Bit(TCCR0,CS01);
     5de:	a3 e5       	ldi	r26, 0x53	; 83
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	e3 e5       	ldi	r30, 0x53	; 83
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	82 60       	ori	r24, 0x02	; 2
     5ea:	8c 93       	st	X, r24


}
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	cf 91       	pop	r28
     5f6:	df 91       	pop	r29
     5f8:	08 95       	ret

000005fa <TIMER_interruptEnable>:
/*************Enabling timer interrupt ******/
void TIMER_interruptEnable(void)
{
     5fa:	df 93       	push	r29
     5fc:	cf 93       	push	r28
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,7);
     602:	af e5       	ldi	r26, 0x5F	; 95
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	ef e5       	ldi	r30, 0x5F	; 95
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	80 68       	ori	r24, 0x80	; 128
     60e:	8c 93       	st	X, r24
	Set_Bit(TIMSK,OCIE0);
     610:	a9 e5       	ldi	r26, 0x59	; 89
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	e9 e5       	ldi	r30, 0x59	; 89
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	82 60       	ori	r24, 0x02	; 2
     61c:	8c 93       	st	X, r24
}
     61e:	cf 91       	pop	r28
     620:	df 91       	pop	r29
     622:	08 95       	ret

00000624 <TMR_delay>:
/*************timer delay enable ********/
void TMR_delay(uint32 delay)
{
     624:	df 93       	push	r29
     626:	cf 93       	push	r28
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	28 97       	sbiw	r28, 0x08	; 8
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	6d 83       	std	Y+5, r22	; 0x05
     63a:	7e 83       	std	Y+6, r23	; 0x06
     63c:	8f 83       	std	Y+7, r24	; 0x07
     63e:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	TCNT0=0;
     640:	e2 e5       	ldi	r30, 0x52	; 82
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	10 82       	st	Z, r1
	TMR_vidInit_ctc(1);
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 b7 02 	call	0x56e	; 0x56e <TMR_vidInit_ctc>
	for(i=0;i<(delay/2);i++)
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	1a 82       	std	Y+2, r1	; 0x02
     652:	1b 82       	std	Y+3, r1	; 0x03
     654:	1c 82       	std	Y+4, r1	; 0x04
     656:	1b c0       	rjmp	.+54     	; 0x68e <TMR_delay+0x6a>
	{
		while(!(TIFR&(1<<OCF0)));
     658:	e8 e5       	ldi	r30, 0x58	; 88
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	82 70       	andi	r24, 0x02	; 2
     664:	90 70       	andi	r25, 0x00	; 0
     666:	00 97       	sbiw	r24, 0x00	; 0
     668:	b9 f3       	breq	.-18     	; 0x658 <TMR_delay+0x34>
		Set_Bit(TIFR,OCF0);
     66a:	a8 e5       	ldi	r26, 0x58	; 88
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	e8 e5       	ldi	r30, 0x58	; 88
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	82 60       	ori	r24, 0x02	; 2
     676:	8c 93       	st	X, r24
void TMR_delay(uint32 delay)
{
	uint32 i;
	TCNT0=0;
	TMR_vidInit_ctc(1);
	for(i=0;i<(delay/2);i++)
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	9a 81       	ldd	r25, Y+2	; 0x02
     67c:	ab 81       	ldd	r26, Y+3	; 0x03
     67e:	bc 81       	ldd	r27, Y+4	; 0x04
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	9a 83       	std	Y+2, r25	; 0x02
     68a:	ab 83       	std	Y+3, r26	; 0x03
     68c:	bc 83       	std	Y+4, r27	; 0x04
     68e:	8d 81       	ldd	r24, Y+5	; 0x05
     690:	9e 81       	ldd	r25, Y+6	; 0x06
     692:	af 81       	ldd	r26, Y+7	; 0x07
     694:	b8 85       	ldd	r27, Y+8	; 0x08
     696:	9c 01       	movw	r18, r24
     698:	ad 01       	movw	r20, r26
     69a:	56 95       	lsr	r21
     69c:	47 95       	ror	r20
     69e:	37 95       	ror	r19
     6a0:	27 95       	ror	r18
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	ab 81       	ldd	r26, Y+3	; 0x03
     6a8:	bc 81       	ldd	r27, Y+4	; 0x04
     6aa:	82 17       	cp	r24, r18
     6ac:	93 07       	cpc	r25, r19
     6ae:	a4 07       	cpc	r26, r20
     6b0:	b5 07       	cpc	r27, r21
     6b2:	90 f2       	brcs	.-92     	; 0x658 <TMR_delay+0x34>
	{
		while(!(TIFR&(1<<OCF0)));
		Set_Bit(TIFR,OCF0);
	}
}
     6b4:	28 96       	adiw	r28, 0x08	; 8
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	cf 91       	pop	r28
     6c2:	df 91       	pop	r29
     6c4:	08 95       	ret

000006c6 <timer_stop>:

void timer_stop(void)
{
     6c6:	df 93       	push	r29
     6c8:	cf 93       	push	r28
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
     6ce:	e3 e5       	ldi	r30, 0x53	; 83
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	10 82       	st	Z, r1
}
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	08 95       	ret

000006da <OS_SetCallBack>:
void OS_SetCallBack(void(*a_ptr)(void))
{
     6da:	df 93       	push	r29
     6dc:	cf 93       	push	r28
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <OS_SetCallBack+0x6>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
	OS_CallBackPtr_g=a_ptr;
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	90 93 e7 00 	sts	0x00E7, r25
     6f0:	80 93 e6 00 	sts	0x00E6, r24
}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	cf 91       	pop	r28
     6fa:	df 91       	pop	r29
     6fc:	08 95       	ret

000006fe <__vector_10>:
void __vector_10 (void)
{
     6fe:	1f 92       	push	r1
     700:	0f 92       	push	r0
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	0f 92       	push	r0
     706:	11 24       	eor	r1, r1
     708:	2f 93       	push	r18
     70a:	3f 93       	push	r19
     70c:	4f 93       	push	r20
     70e:	5f 93       	push	r21
     710:	6f 93       	push	r22
     712:	7f 93       	push	r23
     714:	8f 93       	push	r24
     716:	9f 93       	push	r25
     718:	af 93       	push	r26
     71a:	bf 93       	push	r27
     71c:	ef 93       	push	r30
     71e:	ff 93       	push	r31
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
	if(OS_CallBackPtr_g != NULL)
     728:	80 91 e6 00 	lds	r24, 0x00E6
     72c:	90 91 e7 00 	lds	r25, 0x00E7
     730:	00 97       	sbiw	r24, 0x00	; 0
     732:	29 f0       	breq	.+10     	; 0x73e <__vector_10+0x40>
	{
		OS_CallBackPtr_g();
     734:	e0 91 e6 00 	lds	r30, 0x00E6
     738:	f0 91 e7 00 	lds	r31, 0x00E7
     73c:	09 95       	icall
	}
}
     73e:	cf 91       	pop	r28
     740:	df 91       	pop	r29
     742:	ff 91       	pop	r31
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	0f 90       	pop	r0
     760:	1f 90       	pop	r1
     762:	18 95       	reti

00000764 <TMR2_vidInit_ctc>:
#include"STD_TYPES.h"
#include"Macros.h"
#include "TIMERS2_INTERFACE.h"
#include "TIMERS2_PRIVATE.h"
void TMR2_vidInit_ctc(void)
{
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
	 * 0. Normal Mode
	 * 1. PWM, Phase Correct
	 * 2. CTC Mode
	 * 3. Fast PWM
	 */
	TCNT2=0;
     76c:	e4 e4       	ldi	r30, 0x44	; 68
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	10 82       	st	Z, r1
	OCR2=one_millisecondsresolution;
     772:	e3 e4       	ldi	r30, 0x43	; 67
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	8a ef       	ldi	r24, 0xFA	; 250
     778:	80 83       	st	Z, r24
	TCCR2 =(1<<FORCEOUTPUTCOMPAREDISABLE) |CTC_mode |F_CPU_CLOCK;
     77a:	e5 e4       	ldi	r30, 0x45	; 69
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	8b e0       	ldi	r24, 0x0B	; 11
     780:	80 83       	st	Z, r24
}
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	08 95       	ret

00000788 <TMR2_delay>:

/*************timer delay enable ********/
void TMR2_delay(uint32 Delay)
{
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	28 97       	sbiw	r28, 0x08	; 8
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	6d 83       	std	Y+5, r22	; 0x05
     79e:	7e 83       	std	Y+6, r23	; 0x06
     7a0:	8f 83       	std	Y+7, r24	; 0x07
     7a2:	98 87       	std	Y+8, r25	; 0x08
	/*Enabling CTC_timer timer to work on delay */
	uint32 Index;
	TCNT2=0;
     7a4:	e4 e4       	ldi	r30, 0x44	; 68
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	10 82       	st	Z, r1
	TMR2_vidInit_ctc();
     7aa:	0e 94 b2 03 	call	0x764	; 0x764 <TMR2_vidInit_ctc>
	for(Index=0;Index<(Delay);Index++)
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	1a 82       	std	Y+2, r1	; 0x02
     7b2:	1b 82       	std	Y+3, r1	; 0x03
     7b4:	1c 82       	std	Y+4, r1	; 0x04
     7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <TMR2_delay+0x5e>
	{
		while(!(TIFR&(1<<outputcomparematchflag)));
     7b8:	e8 e5       	ldi	r30, 0x58	; 88
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	88 23       	and	r24, r24
     7c0:	dc f7       	brge	.-10     	; 0x7b8 <TMR2_delay+0x30>
		Set_Bit(TIFR,outputcomparematchflag);
     7c2:	a8 e5       	ldi	r26, 0x58	; 88
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	e8 e5       	ldi	r30, 0x58	; 88
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	8c 93       	st	X, r24
{
	/*Enabling CTC_timer timer to work on delay */
	uint32 Index;
	TCNT2=0;
	TMR2_vidInit_ctc();
	for(Index=0;Index<(Delay);Index++)
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	ab 81       	ldd	r26, Y+3	; 0x03
     7d6:	bc 81       	ldd	r27, Y+4	; 0x04
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	a1 1d       	adc	r26, r1
     7dc:	b1 1d       	adc	r27, r1
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	9a 83       	std	Y+2, r25	; 0x02
     7e2:	ab 83       	std	Y+3, r26	; 0x03
     7e4:	bc 83       	std	Y+4, r27	; 0x04
     7e6:	29 81       	ldd	r18, Y+1	; 0x01
     7e8:	3a 81       	ldd	r19, Y+2	; 0x02
     7ea:	4b 81       	ldd	r20, Y+3	; 0x03
     7ec:	5c 81       	ldd	r21, Y+4	; 0x04
     7ee:	8d 81       	ldd	r24, Y+5	; 0x05
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	af 81       	ldd	r26, Y+7	; 0x07
     7f4:	b8 85       	ldd	r27, Y+8	; 0x08
     7f6:	28 17       	cp	r18, r24
     7f8:	39 07       	cpc	r19, r25
     7fa:	4a 07       	cpc	r20, r26
     7fc:	5b 07       	cpc	r21, r27
     7fe:	e0 f2       	brcs	.-72     	; 0x7b8 <TMR2_delay+0x30>
	{
		while(!(TIFR&(1<<outputcomparematchflag)));
		Set_Bit(TIFR,outputcomparematchflag);
	}
}
     800:	28 96       	adiw	r28, 0x08	; 8
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	cf 91       	pop	r28
     80e:	df 91       	pop	r29
     810:	08 95       	ret

00000812 <Infotainment_Task>:
static uint8 Infotainment_DisplayFlag_5Sec = TRUE;
static uint8 Start_Flag = YES;


void Infotainment_Task(void)
{
     812:	df 93       	push	r29
     814:	cf 93       	push	r28
     816:	00 d0       	rcall	.+0      	; 0x818 <Infotainment_Task+0x6>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
	static uint8 i = 0;
	static uint8 QuesFlag = ANSWERED;
	static uint8 FinalRes_Flag = NO;
	static uint8 result = 0;

	switch(Infotainment_State)
     81c:	80 91 e8 00 	lds	r24, 0x00E8
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	3a 83       	std	Y+2, r19	; 0x02
     826:	29 83       	std	Y+1, r18	; 0x01
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	91 05       	cpc	r25, r1
     830:	11 f1       	breq	.+68     	; 0x876 <__stack+0x17>
     832:	29 81       	ldd	r18, Y+1	; 0x01
     834:	3a 81       	ldd	r19, Y+2	; 0x02
     836:	22 30       	cpi	r18, 0x02	; 2
     838:	31 05       	cpc	r19, r1
     83a:	09 f4       	brne	.+2      	; 0x83e <Infotainment_Task+0x2c>
     83c:	d1 c0       	rjmp	.+418    	; 0x9e0 <__stack+0x181>
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	9a 81       	ldd	r25, Y+2	; 0x02
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	09 f0       	breq	.+2      	; 0x848 <Infotainment_Task+0x36>
     846:	ef c0       	rjmp	.+478    	; 0xa26 <__stack+0x1c7>
	{
	case START:
		if(Start_Flag == YES)
     848:	80 91 dc 00 	lds	r24, 0x00DC
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	09 f0       	breq	.+2      	; 0x852 <Infotainment_Task+0x40>
     850:	ea c0       	rjmp	.+468    	; 0xa26 <__stack+0x1c7>
		{
			LCD_displayString(" wlcm to game :)");
     852:	8e e8       	ldi	r24, 0x8E	; 142
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
			LCD_gotoRowColumn(2, 1);
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_gotoRowColumn>
			LCD_displayString("press 9 start");
     862:	8f e9       	ldi	r24, 0x9F	; 159
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
			Start_Flag = NO;
     86a:	10 92 dc 00 	sts	0x00DC, r1

			Infotainment_State = DISPLAY_QS;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 e8 00 	sts	0x00E8, r24
     874:	d8 c0       	rjmp	.+432    	; 0xa26 <__stack+0x1c7>
		}

		break;

	case DISPLAY_QS:
		if((Keypad_getKey() == 9) && (Start_Flag == NO))
     876:	0e 94 65 07 	call	0xeca	; 0xeca <Keypad_getKey>
     87a:	89 30       	cpi	r24, 0x09	; 9
     87c:	49 f4       	brne	.+18     	; 0x890 <__stack+0x31>
     87e:	80 91 dc 00 	lds	r24, 0x00DC
     882:	88 23       	and	r24, r24
     884:	29 f4       	brne	.+10     	; 0x890 <__stack+0x31>
		{
			LCD_clear();
     886:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
			Start_Flag = YES;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 dc 00 	sts	0x00DC, r24
		}

		if(i<6 && QuesFlag == ANSWERED && Start_Flag == YES && Infotainment_DisplayFlag_2Sec == TRUE)
     890:	80 91 eb 00 	lds	r24, 0x00EB
     894:	86 30       	cpi	r24, 0x06	; 6
     896:	e8 f4       	brcc	.+58     	; 0x8d2 <__stack+0x73>
     898:	80 91 dd 00 	lds	r24, 0x00DD
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	c9 f4       	brne	.+50     	; 0x8d2 <__stack+0x73>
     8a0:	80 91 dc 00 	lds	r24, 0x00DC
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	a9 f4       	brne	.+42     	; 0x8d2 <__stack+0x73>
     8a8:	80 91 da 00 	lds	r24, 0x00DA
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	89 f4       	brne	.+34     	; 0x8d2 <__stack+0x73>
		{
			LCD_clear();
     8b0:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
			LCD_displayString(quesArrPtr[i]);
     8b4:	80 91 eb 00 	lds	r24, 0x00EB
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	fc 01       	movw	r30, r24
     8c2:	e0 53       	subi	r30, 0x30	; 48
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
			QuesFlag = NOT_ANSWERED;
     8ce:	10 92 dd 00 	sts	0x00DD, r1
		}

		if((i<6) && (QuesFlag == NOT_ANSWERED))
     8d2:	80 91 eb 00 	lds	r24, 0x00EB
     8d6:	86 30       	cpi	r24, 0x06	; 6
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__stack+0x7d>
     8da:	a5 c0       	rjmp	.+330    	; 0xa26 <__stack+0x1c7>
     8dc:	80 91 dd 00 	lds	r24, 0x00DD
     8e0:	88 23       	and	r24, r24
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	a0 c0       	rjmp	.+320    	; 0xa26 <__stack+0x1c7>
		{
			key = Keypad_getKey();
     8e6:	0e 94 65 07 	call	0xeca	; 0xeca <Keypad_getKey>
     8ea:	80 93 ec 00 	sts	0x00EC, r24
			if(1 ==  key)
     8ee:	80 91 ec 00 	lds	r24, 0x00EC
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	a9 f5       	brne	.+106    	; 0x960 <__stack+0x101>
			{
				if(answArrPtr[i] == YES)
     8f6:	80 91 eb 00 	lds	r24, 0x00EB
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	e0 52       	subi	r30, 0x20	; 32
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	80 81       	ld	r24, Z
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	c1 f4       	brne	.+48     	; 0x93a <__stack+0xdb>
				{
					LCD_clear();
     90a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
					LCD_displayString("CORRECT :)");
     90e:	8d ea       	ldi	r24, 0xAD	; 173
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
					result++;
     916:	80 91 e9 00 	lds	r24, 0x00E9
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	80 93 e9 00 	sts	0x00E9, r24
					i++;
     920:	80 91 eb 00 	lds	r24, 0x00EB
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 eb 00 	sts	0x00EB, r24
					key = 0;
     92a:	10 92 ec 00 	sts	0x00EC, r1
					QuesFlag = ANSWERED;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 dd 00 	sts	0x00DD, r24
					Infotainment_DisplayFlag_2Sec = FALSE;
     934:	10 92 da 00 	sts	0x00DA, r1
     938:	4b c0       	rjmp	.+150    	; 0x9d0 <__stack+0x171>
				}
				else
				{
					LCD_clear();
     93a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
					LCD_displayString("WRONG :(");
     93e:	88 eb       	ldi	r24, 0xB8	; 184
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
					i++;
     946:	80 91 eb 00 	lds	r24, 0x00EB
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 eb 00 	sts	0x00EB, r24
					key = 0;
     950:	10 92 ec 00 	sts	0x00EC, r1
					QuesFlag = ANSWERED;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 dd 00 	sts	0x00DD, r24
					Infotainment_DisplayFlag_2Sec = FALSE;
     95a:	10 92 da 00 	sts	0x00DA, r1
     95e:	38 c0       	rjmp	.+112    	; 0x9d0 <__stack+0x171>
				}

			}
			else if(key == 3)
     960:	80 91 ec 00 	lds	r24, 0x00EC
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	a1 f5       	brne	.+104    	; 0x9d0 <__stack+0x171>
			{
				if(answArrPtr[i] == NO)
     968:	80 91 eb 00 	lds	r24, 0x00EB
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	e0 52       	subi	r30, 0x20	; 32
     974:	ff 4f       	sbci	r31, 0xFF	; 255
     976:	80 81       	ld	r24, Z
     978:	88 23       	and	r24, r24
     97a:	c1 f4       	brne	.+48     	; 0x9ac <__stack+0x14d>
				{
					LCD_clear();
     97c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
					LCD_displayString("CORRECT :)");
     980:	8d ea       	ldi	r24, 0xAD	; 173
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
					result++;
     988:	80 91 e9 00 	lds	r24, 0x00E9
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	80 93 e9 00 	sts	0x00E9, r24
					i++;
     992:	80 91 eb 00 	lds	r24, 0x00EB
     996:	8f 5f       	subi	r24, 0xFF	; 255
     998:	80 93 eb 00 	sts	0x00EB, r24
					key = 0;
     99c:	10 92 ec 00 	sts	0x00EC, r1
					QuesFlag = ANSWERED;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 dd 00 	sts	0x00DD, r24
					Infotainment_DisplayFlag_2Sec = FALSE;
     9a6:	10 92 da 00 	sts	0x00DA, r1
     9aa:	12 c0       	rjmp	.+36     	; 0x9d0 <__stack+0x171>
				}
				else
				{
					LCD_clear();
     9ac:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
					LCD_displayString("WRONG :(");
     9b0:	88 eb       	ldi	r24, 0xB8	; 184
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
					i++;
     9b8:	80 91 eb 00 	lds	r24, 0x00EB
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 eb 00 	sts	0x00EB, r24
					key = 0;
     9c2:	10 92 ec 00 	sts	0x00EC, r1
					QuesFlag = ANSWERED;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 dd 00 	sts	0x00DD, r24
					Infotainment_DisplayFlag_2Sec = FALSE;
     9cc:	10 92 da 00 	sts	0x00DA, r1
			{

			}


			if(i==5)
     9d0:	80 91 eb 00 	lds	r24, 0x00EB
     9d4:	85 30       	cpi	r24, 0x05	; 5
     9d6:	39 f5       	brne	.+78     	; 0xa26 <__stack+0x1c7>
			{
				Infotainment_State = DISPLAY_RESULT;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	80 93 e8 00 	sts	0x00E8, r24
     9de:	23 c0       	rjmp	.+70     	; 0xa26 <__stack+0x1c7>


		break;

	case DISPLAY_RESULT:
		if( Infotainment_DisplayFlag_5Sec == TRUE)
     9e0:	80 91 db 00 	lds	r24, 0x00DB
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	f9 f4       	brne	.+62     	; 0xa26 <__stack+0x1c7>
		{
			LCD_clear();
     9e8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <LCD_clear>
			LCD_displayString("Your RESULT = ");
     9ec:	81 ec       	ldi	r24, 0xC1	; 193
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
			Infotainment_DisplayFlag_2Sec = FALSE;
     9f4:	10 92 da 00 	sts	0x00DA, r1
			LCD_gotoRowColumn(0, 15);
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	6f e0       	ldi	r22, 0x0F	; 15
     9fc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_gotoRowColumn>
			LCD_DispalyNumber(result);
     a00:	80 91 e9 00 	lds	r24, 0x00E9
     a04:	88 2f       	mov	r24, r24
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <LCD_DispalyNumber>
			Start_Flag = YES;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 dc 00 	sts	0x00DC, r24
			i=0;
     a1a:	10 92 eb 00 	sts	0x00EB, r1
			Infotainment_DisplayFlag_5Sec = FALSE;
     a1e:	10 92 db 00 	sts	0x00DB, r1

			Infotainment_State = START;
     a22:	10 92 e8 00 	sts	0x00E8, r1
		}

	default:
		break;
		}
	}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	cf 91       	pop	r28
     a2c:	df 91       	pop	r29
     a2e:	08 95       	ret

00000a30 <Infotainment_Delay_2Sec>:


	void Infotainment_Delay_2Sec(void)
	{
     a30:	df 93       	push	r29
     a32:	cf 93       	push	r28
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
		Infotainment_DisplayFlag_2Sec = TRUE;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 da 00 	sts	0x00DA, r24
	}
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <Infotainment_Delay_5Sec>:

	void Infotainment_Delay_5Sec(void)
	{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
		Infotainment_DisplayFlag_5Sec = TRUE;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 db 00 	sts	0x00DB, r24
		Start_Flag = YES;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 dc 00 	sts	0x00DC, r24
	}
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	08 95       	ret

00000a5e <Keypad_init>:
static uint8 KeyPadButton[ROWS_NUM][COLS_NUM][SAMPLES_NUM];
static uint8 KeyPadButton_State[ROWS_NUM][COLS_NUM];


void Keypad_init(void)
{
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	00 d0       	rcall	.+0      	; 0xa64 <Keypad_init+0x6>
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	uint8 Ci = 0;
     a68:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Ri = 0;
     a6a:	19 82       	std	Y+1, r1	; 0x01
	/*
		1- ROWS -> O/P , High
		2- CLOS -> I/P , High
	 */

	setBits(KEYPAD_DDR,ROWS_MASK);    // O/P
     a6c:	a4 e3       	ldi	r26, 0x34	; 52
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e4 e3       	ldi	r30, 0x34	; 52
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	8c 61       	ori	r24, 0x1C	; 28
     a78:	8c 93       	st	X, r24
	setBits(KEYPAD_PORT,ROWS_MASK);   // High
     a7a:	a5 e3       	ldi	r26, 0x35	; 53
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e5 e3       	ldi	r30, 0x35	; 53
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	8c 61       	ori	r24, 0x1C	; 28
     a86:	8c 93       	st	X, r24

	clearBits(KEYPAD_DDR,COLS_MASK);  // I/P
     a88:	a4 e3       	ldi	r26, 0x34	; 52
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e4 e3       	ldi	r30, 0x34	; 52
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8f 71       	andi	r24, 0x1F	; 31
     a94:	8c 93       	st	X, r24
	setBits(KEYPAD_PORT,COLS_MASK);   // High
     a96:	a5 e3       	ldi	r26, 0x35	; 53
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	e5 e3       	ldi	r30, 0x35	; 53
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	80 6e       	ori	r24, 0xE0	; 224
     aa2:	8c 93       	st	X, r24

	for(Ri=0 ; Ri < ROWS_NUM ; Ri++)
     aa4:	19 82       	std	Y+1, r1	; 0x01
     aa6:	44 c0       	rjmp	.+136    	; 0xb30 <Keypad_init+0xd2>
	{
		for(Ci = 0U; Ci < COLS_NUM; Ci++)
     aa8:	1a 82       	std	Y+2, r1	; 0x02
     aaa:	3c c0       	rjmp	.+120    	; 0xb24 <Keypad_init+0xc6>
		{
			KeyPadButton[Ri][Ci][0] = RELEASED_LEVEL;
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	28 2f       	mov	r18, r24
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	8a 81       	ldd	r24, Y+2	; 0x02
     ab4:	48 2f       	mov	r20, r24
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	c9 01       	movw	r24, r18
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	84 0f       	add	r24, r20
     ac4:	95 1f       	adc	r25, r21
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	fc 01       	movw	r30, r24
     acc:	e3 51       	subi	r30, 0x13	; 19
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
			KeyPadButton[Ri][Ci][1] = RELEASED_LEVEL;
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	8a 81       	ldd	r24, Y+2	; 0x02
     adc:	48 2f       	mov	r20, r24
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	c9 01       	movw	r24, r18
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	82 0f       	add	r24, r18
     ae8:	93 1f       	adc	r25, r19
     aea:	84 0f       	add	r24, r20
     aec:	95 1f       	adc	r25, r21
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	fc 01       	movw	r30, r24
     af4:	e2 51       	subi	r30, 0x12	; 18
     af6:	ff 4f       	sbci	r31, 0xFF	; 255
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 83       	st	Z, r24
			KeyPadButton_State[Ri][Ci] = RELEASED;
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	48 2f       	mov	r20, r24
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	c9 01       	movw	r24, r18
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	82 0f       	add	r24, r18
     b10:	93 1f       	adc	r25, r19
     b12:	84 0f       	add	r24, r20
     b14:	95 1f       	adc	r25, r21
     b16:	fc 01       	movw	r30, r24
     b18:	e1 50       	subi	r30, 0x01	; 1
     b1a:	ff 4f       	sbci	r31, 0xFF	; 255
     b1c:	10 82       	st	Z, r1
	clearBits(KEYPAD_DDR,COLS_MASK);  // I/P
	setBits(KEYPAD_PORT,COLS_MASK);   // High

	for(Ri=0 ; Ri < ROWS_NUM ; Ri++)
	{
		for(Ci = 0U; Ci < COLS_NUM; Ci++)
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	8a 83       	std	Y+2, r24	; 0x02
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	08 f2       	brcs	.-126    	; 0xaac <Keypad_init+0x4e>
	setBits(KEYPAD_PORT,ROWS_MASK);   // High

	clearBits(KEYPAD_DDR,COLS_MASK);  // I/P
	setBits(KEYPAD_PORT,COLS_MASK);   // High

	for(Ri=0 ; Ri < ROWS_NUM ; Ri++)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	89 83       	std	Y+1, r24	; 0x01
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	08 f4       	brcc	.+2      	; 0xb38 <Keypad_init+0xda>
     b36:	b8 cf       	rjmp	.-144    	; 0xaa8 <Keypad_init+0x4a>
			KeyPadButton[Ri][Ci][0] = RELEASED_LEVEL;
			KeyPadButton[Ri][Ci][1] = RELEASED_LEVEL;
			KeyPadButton_State[Ri][Ci] = RELEASED;
		}
	}
}
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <Keypad_UpdateState>:


void Keypad_UpdateState(void)
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	00 d0       	rcall	.+0      	; 0xb48 <Keypad_UpdateState+0x6>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <Keypad_UpdateState+0x8>
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	uint8 Ci = 0;
     b4e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 Ri = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01

	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
     b52:	19 82       	std	Y+1, r1	; 0x01
     b54:	af c1       	rjmp	.+862    	; 0xeb4 <Keypad_UpdateState+0x372>
	{
		setBits(KEYPAD_PORT,ROWS_MASK);
     b56:	a5 e3       	ldi	r26, 0x35	; 53
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e5 e3       	ldi	r30, 0x35	; 53
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8c 61       	ori	r24, 0x1C	; 28
     b62:	8c 93       	st	X, r24
		Clear_Bit(KEYPAD_PORT,(Ri+2));
     b64:	a5 e3       	ldi	r26, 0x35	; 53
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e5 e3       	ldi	r30, 0x35	; 53
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	48 2f       	mov	r20, r24
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	88 2f       	mov	r24, r24
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	9c 01       	movw	r18, r24
     b78:	2e 5f       	subi	r18, 0xFE	; 254
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 2e       	mov	r0, r18
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <Keypad_UpdateState+0x46>
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	0a 94       	dec	r0
     b8a:	e2 f7       	brpl	.-8      	; 0xb84 <Keypad_UpdateState+0x42>
     b8c:	80 95       	com	r24
     b8e:	84 23       	and	r24, r20
     b90:	8c 93       	st	X, r24

		for(Ci=0 ; Ci<COLS_NUM ; Ci++)
     b92:	1a 82       	std	Y+2, r1	; 0x02
     b94:	88 c1       	rjmp	.+784    	; 0xea6 <Keypad_UpdateState+0x364>
		{
			KeyPadButton[Ri][Ci][0] = KeyPadButton[Ri][Ci][1];
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	68 2f       	mov	r22, r24
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	a8 2f       	mov	r26, r24
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	48 2f       	mov	r20, r24
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	c9 01       	movw	r24, r18
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	84 0f       	add	r24, r20
     bba:	95 1f       	adc	r25, r21
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	fc 01       	movw	r30, r24
     bc2:	e2 51       	subi	r30, 0x12	; 18
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	20 81       	ld	r18, Z
     bc8:	cb 01       	movw	r24, r22
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	86 0f       	add	r24, r22
     bd0:	97 1f       	adc	r25, r23
     bd2:	8a 0f       	add	r24, r26
     bd4:	9b 1f       	adc	r25, r27
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	fc 01       	movw	r30, r24
     bdc:	e3 51       	subi	r30, 0x13	; 19
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	20 83       	st	Z, r18

			KeyPadButton[Ri][Ci][1] = Get_Bit(KEYPAD_PIN,(5+Ci));
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	68 2f       	mov	r22, r24
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	a8 2f       	mov	r26, r24
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e3 e3       	ldi	r30, 0x33	; 51
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	48 2f       	mov	r20, r24
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9c 01       	movw	r18, r24
     c00:	2b 5f       	subi	r18, 0xFB	; 251
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <Keypad_UpdateState+0xcc>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	2a 95       	dec	r18
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <Keypad_UpdateState+0xc8>
     c12:	9a 01       	movw	r18, r20
     c14:	28 23       	and	r18, r24
     c16:	39 23       	and	r19, r25
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	05 96       	adiw	r24, 0x05	; 5
     c20:	a9 01       	movw	r20, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <Keypad_UpdateState+0xe6>
     c24:	55 95       	asr	r21
     c26:	47 95       	ror	r20
     c28:	8a 95       	dec	r24
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <Keypad_UpdateState+0xe2>
     c2c:	ca 01       	movw	r24, r20
     c2e:	28 2f       	mov	r18, r24
     c30:	cb 01       	movw	r24, r22
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	86 0f       	add	r24, r22
     c38:	97 1f       	adc	r25, r23
     c3a:	8a 0f       	add	r24, r26
     c3c:	9b 1f       	adc	r25, r27
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	fc 01       	movw	r30, r24
     c44:	e2 51       	subi	r30, 0x12	; 18
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	20 83       	st	Z, r18
			switch(KeyPadButton_State[Ri][Ci])
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	48 2f       	mov	r20, r24
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	c9 01       	movw	r24, r18
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	82 0f       	add	r24, r18
     c5e:	93 1f       	adc	r25, r19
     c60:	84 0f       	add	r24, r20
     c62:	95 1f       	adc	r25, r21
     c64:	fc 01       	movw	r30, r24
     c66:	e1 50       	subi	r30, 0x01	; 1
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	80 81       	ld	r24, Z
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	3c 83       	std	Y+4, r19	; 0x04
     c72:	2b 83       	std	Y+3, r18	; 0x03
     c74:	4b 81       	ldd	r20, Y+3	; 0x03
     c76:	5c 81       	ldd	r21, Y+4	; 0x04
     c78:	41 30       	cpi	r20, 0x01	; 1
     c7a:	51 05       	cpc	r21, r1
     c7c:	09 f4       	brne	.+2      	; 0xc80 <Keypad_UpdateState+0x13e>
     c7e:	57 c0       	rjmp	.+174    	; 0xd2e <Keypad_UpdateState+0x1ec>
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	9c 81       	ldd	r25, Y+4	; 0x04
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	91 05       	cpc	r25, r1
     c88:	34 f4       	brge	.+12     	; 0xc96 <Keypad_UpdateState+0x154>
     c8a:	2b 81       	ldd	r18, Y+3	; 0x03
     c8c:	3c 81       	ldd	r19, Y+4	; 0x04
     c8e:	21 15       	cp	r18, r1
     c90:	31 05       	cpc	r19, r1
     c92:	71 f0       	breq	.+28     	; 0xcb0 <Keypad_UpdateState+0x16e>
     c94:	05 c1       	rjmp	.+522    	; 0xea0 <Keypad_UpdateState+0x35e>
     c96:	4b 81       	ldd	r20, Y+3	; 0x03
     c98:	5c 81       	ldd	r21, Y+4	; 0x04
     c9a:	42 30       	cpi	r20, 0x02	; 2
     c9c:	51 05       	cpc	r21, r1
     c9e:	09 f4       	brne	.+2      	; 0xca2 <Keypad_UpdateState+0x160>
     ca0:	85 c0       	rjmp	.+266    	; 0xdac <Keypad_UpdateState+0x26a>
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	9c 81       	ldd	r25, Y+4	; 0x04
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <Keypad_UpdateState+0x16c>
     cac:	be c0       	rjmp	.+380    	; 0xe2a <Keypad_UpdateState+0x2e8>
     cae:	f8 c0       	rjmp	.+496    	; 0xea0 <Keypad_UpdateState+0x35e>
			{
			case RELEASED:
				if((KeyPadButton[Ri][Ci][0] == PRESSED_LEVEL) && (KeyPadButton[Ri][Ci][1] == PRESSED_LEVEL))
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	48 2f       	mov	r20, r24
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	c9 01       	movw	r24, r18
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	84 0f       	add	r24, r20
     cc8:	95 1f       	adc	r25, r21
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	fc 01       	movw	r30, r24
     cd0:	e3 51       	subi	r30, 0x13	; 19
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	88 23       	and	r24, r24
     cd8:	09 f0       	breq	.+2      	; 0xcdc <Keypad_UpdateState+0x19a>
     cda:	e2 c0       	rjmp	.+452    	; 0xea0 <Keypad_UpdateState+0x35e>
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	48 2f       	mov	r20, r24
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	c9 01       	movw	r24, r18
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	84 0f       	add	r24, r20
     cf4:	95 1f       	adc	r25, r21
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 51       	subi	r30, 0x12	; 18
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	09 f0       	breq	.+2      	; 0xd08 <Keypad_UpdateState+0x1c6>
     d06:	cc c0       	rjmp	.+408    	; 0xea0 <Keypad_UpdateState+0x35e>
				{
					KeyPadButton_State[Ri][Ci] = PRE_PRESSED;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	48 2f       	mov	r20, r24
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	c9 01       	movw	r24, r18
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	84 0f       	add	r24, r20
     d20:	95 1f       	adc	r25, r21
     d22:	fc 01       	movw	r30, r24
     d24:	e1 50       	subi	r30, 0x01	; 1
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24
     d2c:	b9 c0       	rjmp	.+370    	; 0xea0 <Keypad_UpdateState+0x35e>
					/* Do Nothing */
				}
				break;

			case PRE_PRESSED:
				if((KeyPadButton[Ri][Ci][0] == PRESSED_LEVEL) && (KeyPadButton[Ri][Ci][1] == PRESSED_LEVEL))
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	48 2f       	mov	r20, r24
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	c9 01       	movw	r24, r18
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	82 0f       	add	r24, r18
     d42:	93 1f       	adc	r25, r19
     d44:	84 0f       	add	r24, r20
     d46:	95 1f       	adc	r25, r21
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	fc 01       	movw	r30, r24
     d4e:	e3 51       	subi	r30, 0x13	; 19
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <Keypad_UpdateState+0x218>
     d58:	a3 c0       	rjmp	.+326    	; 0xea0 <Keypad_UpdateState+0x35e>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	48 2f       	mov	r20, r24
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	c9 01       	movw	r24, r18
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	82 0f       	add	r24, r18
     d6e:	93 1f       	adc	r25, r19
     d70:	84 0f       	add	r24, r20
     d72:	95 1f       	adc	r25, r21
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 51       	subi	r30, 0x12	; 18
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	80 81       	ld	r24, Z
     d80:	88 23       	and	r24, r24
     d82:	09 f0       	breq	.+2      	; 0xd86 <Keypad_UpdateState+0x244>
     d84:	8d c0       	rjmp	.+282    	; 0xea0 <Keypad_UpdateState+0x35e>
				{
					KeyPadButton_State[Ri][Ci] = PRESSED;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	48 2f       	mov	r20, r24
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	c9 01       	movw	r24, r18
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	84 0f       	add	r24, r20
     d9e:	95 1f       	adc	r25, r21
     da0:	fc 01       	movw	r30, r24
     da2:	e1 50       	subi	r30, 0x01	; 1
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	80 83       	st	Z, r24
     daa:	7a c0       	rjmp	.+244    	; 0xea0 <Keypad_UpdateState+0x35e>
				}
				break;

			case PRESSED:

				if((KeyPadButton[Ri][Ci][0] == RELEASED_LEVEL) && (KeyPadButton[Ri][Ci][1] == RELEASED_LEVEL))
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	48 2f       	mov	r20, r24
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	c9 01       	movw	r24, r18
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	84 0f       	add	r24, r20
     dc4:	95 1f       	adc	r25, r21
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	fc 01       	movw	r30, r24
     dcc:	e3 51       	subi	r30, 0x13	; 19
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	80 81       	ld	r24, Z
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <Keypad_UpdateState+0x296>
     dd6:	64 c0       	rjmp	.+200    	; 0xea0 <Keypad_UpdateState+0x35e>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	48 2f       	mov	r20, r24
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	c9 01       	movw	r24, r18
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	84 0f       	add	r24, r20
     df0:	95 1f       	adc	r25, r21
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	fc 01       	movw	r30, r24
     df8:	e2 51       	subi	r30, 0x12	; 18
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	09 f0       	breq	.+2      	; 0xe04 <Keypad_UpdateState+0x2c2>
     e02:	4e c0       	rjmp	.+156    	; 0xea0 <Keypad_UpdateState+0x35e>
				{
					KeyPadButton_State[Ri][Ci] = PRE_RELEASED;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	48 2f       	mov	r20, r24
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	c9 01       	movw	r24, r18
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	84 0f       	add	r24, r20
     e1c:	95 1f       	adc	r25, r21
     e1e:	fc 01       	movw	r30, r24
     e20:	e1 50       	subi	r30, 0x01	; 1
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	80 83       	st	Z, r24
     e28:	3b c0       	rjmp	.+118    	; 0xea0 <Keypad_UpdateState+0x35e>
					/* Do Nothing */
				}
				break;

			case PRE_RELEASED:
				if((KeyPadButton[Ri][Ci][0] == RELEASED_LEVEL) && (KeyPadButton[Ri][Ci][1] == RELEASED_LEVEL))
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	48 2f       	mov	r20, r24
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	c9 01       	movw	r24, r18
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	84 0f       	add	r24, r20
     e42:	95 1f       	adc	r25, r21
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	fc 01       	movw	r30, r24
     e4a:	e3 51       	subi	r30, 0x13	; 19
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	31 f5       	brne	.+76     	; 0xea0 <Keypad_UpdateState+0x35e>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	48 2f       	mov	r20, r24
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	c9 01       	movw	r24, r18
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	82 0f       	add	r24, r18
     e68:	93 1f       	adc	r25, r19
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	fc 01       	movw	r30, r24
     e74:	e2 51       	subi	r30, 0x12	; 18
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	80 81       	ld	r24, Z
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	89 f4       	brne	.+34     	; 0xea0 <Keypad_UpdateState+0x35e>
				{
					KeyPadButton_State[Ri][Ci] = RELEASED;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	48 2f       	mov	r20, r24
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	c9 01       	movw	r24, r18
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	fc 01       	movw	r30, r24
     e9a:	e1 50       	subi	r30, 0x01	; 1
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	10 82       	st	Z, r1
	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
	{
		setBits(KEYPAD_PORT,ROWS_MASK);
		Clear_Bit(KEYPAD_PORT,(Ri+2));

		for(Ci=0 ; Ci<COLS_NUM ; Ci++)
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	8a 83       	std	Y+2, r24	; 0x02
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	08 f4       	brcc	.+2      	; 0xeae <Keypad_UpdateState+0x36c>
     eac:	74 ce       	rjmp	.-792    	; 0xb96 <Keypad_UpdateState+0x54>
void Keypad_UpdateState(void)
{
	uint8 Ci = 0;
	uint8 Ri = 0;

	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	08 f4       	brcc	.+2      	; 0xebc <Keypad_UpdateState+0x37a>
     eba:	4d ce       	rjmp	.-870    	; 0xb56 <Keypad_UpdateState+0x14>
				break;
			}

		}
	}
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <Keypad_getKey>:


uint8 Keypad_getKey(void)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <Keypad_getKey+0x6>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	uint8 Ci = 0;
     ed6:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Ri = 0;
     ed8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ret_value = 0;
     eda:	19 82       	std	Y+1, r1	; 0x01
	//				is it activated (0) ?
	//				yes -> return 4*Ri + Ci + 1
	//			end


	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
     edc:	1a 82       	std	Y+2, r1	; 0x02
     ede:	49 c0       	rjmp	.+146    	; 0xf72 <Keypad_getKey+0xa8>
	{
		setBits(KEYPAD_PORT,ROWS_MASK);
     ee0:	a5 e3       	ldi	r26, 0x35	; 53
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e5 e3       	ldi	r30, 0x35	; 53
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8c 61       	ori	r24, 0x1C	; 28
     eec:	8c 93       	st	X, r24
		Clear_Bit(KEYPAD_PORT,(Ri+2));
     eee:	a5 e3       	ldi	r26, 0x35	; 53
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e3       	ldi	r30, 0x35	; 53
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 01       	movw	r18, r24
     f02:	2e 5f       	subi	r18, 0xFE	; 254
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 2e       	mov	r0, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <Keypad_getKey+0x48>
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	0a 94       	dec	r0
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <Keypad_getKey+0x44>
     f16:	80 95       	com	r24
     f18:	84 23       	and	r24, r20
     f1a:	8c 93       	st	X, r24
		for(Ci=0 ; Ci<COLS_NUM ; Ci++)
     f1c:	1b 82       	std	Y+3, r1	; 0x03
     f1e:	23 c0       	rjmp	.+70     	; 0xf66 <Keypad_getKey+0x9c>
		{
			if(KeyPadButton_State[Ri][Ci] == PRE_RELEASED)
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	48 2f       	mov	r20, r24
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	c9 01       	movw	r24, r18
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	82 0f       	add	r24, r18
     f34:	93 1f       	adc	r25, r19
     f36:	84 0f       	add	r24, r20
     f38:	95 1f       	adc	r25, r21
     f3a:	fc 01       	movw	r30, r24
     f3c:	e1 50       	subi	r30, 0x01	; 1
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	69 f4       	brne	.+26     	; 0xf60 <Keypad_getKey+0x96>
			{
				ret_value = (3*Ri + Ci + 1);
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	c9 01       	movw	r24, r18
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	98 2f       	mov	r25, r24
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	89 0f       	add	r24, r25
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	89 83       	std	Y+1, r24	; 0x01

	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
	{
		setBits(KEYPAD_PORT,ROWS_MASK);
		Clear_Bit(KEYPAD_PORT,(Ri+2));
		for(Ci=0 ; Ci<COLS_NUM ; Ci++)
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	d0 f2       	brcs	.-76     	; 0xf20 <Keypad_getKey+0x56>
	//				is it activated (0) ?
	//				yes -> return 4*Ri + Ci + 1
	//			end


	for(Ri=0 ; Ri<ROWS_NUM ; Ri++)
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	8a 83       	std	Y+2, r24	; 0x02
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	08 f4       	brcc	.+2      	; 0xf7a <Keypad_getKey+0xb0>
     f78:	b3 cf       	rjmp	.-154    	; 0xee0 <Keypad_getKey+0x16>
			{

			}
		}
	}
	return ret_value;
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <LCD_init>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_init (void){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	/* Data Direction Configuration */
	DDRA = 0xFF;
     f90:	ea e3       	ldi	r30, 0x3A	; 58
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	80 83       	st	Z, r24
	TMR2_delay(1);
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	/* Initialize LCD to work in 4_bit mode */
	LCD_sendCommand(Init_4bit_1);
     fa4:	83 e3       	ldi	r24, 0x33	; 51
     fa6:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	70 e0       	ldi	r23, 0x00	; 0
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(Init_4bit_2);
     fb6:	82 e3       	ldi	r24, 0x32	; 50
     fb8:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(FunctionSet4bit);
     fc8:	88 e2       	ldi	r24, 0x28	; 40
     fca:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>

	/* LCD Initialization */
	LCD_sendCommand(Return_home); /* Start from home Position */
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(Displayon_Cursoroff);  /* LCD display On */
     fe0:	8c e0       	ldi	r24, 0x0C	; 12
     fe2:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(Display_noshift); /*  mode set */
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(Clear_display); /* Clear LCD display */
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <LCD_sendCommand>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_sendCommand(uint8 command){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	0f 92       	push	r0
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
	/* Control Signals Configuration */
	DIO_WritePin(Register_Select,LOW);  /* Select instruction register */
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(Read_Write,LOW);		/* Write operation */
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(2);
    1040:	62 e0       	ldi	r22, 0x02	; 2
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	/* Sending High nibble */
	PORTA = (PORTA & 0x0F) | (command & 0xF0);
    104c:	ab e3       	ldi	r26, 0x3B	; 59
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	eb e3       	ldi	r30, 0x3B	; 59
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	98 2f       	mov	r25, r24
    1058:	9f 70       	andi	r25, 0x0F	; 15
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	80 7f       	andi	r24, 0xF0	; 240
    105e:	89 2b       	or	r24, r25
    1060:	8c 93       	st	X, r24
	TMR2_delay(1);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,LOW);       /* Disable Signal */
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>

	/* Sending Low nibble */
	PORTA = (PORTA & 0x0F) | ((command & 0x0F) << 4 );
    1096:	ab e3       	ldi	r26, 0x3B	; 59
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e3       	ldi	r30, 0x3B	; 59
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	2f 70       	andi	r18, 0x0F	; 15
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	82 95       	swap	r24
    10ac:	92 95       	swap	r25
    10ae:	90 7f       	andi	r25, 0xF0	; 240
    10b0:	98 27       	eor	r25, r24
    10b2:	80 7f       	andi	r24, 0xF0	; 240
    10b4:	98 27       	eor	r25, r24
    10b6:	82 2b       	or	r24, r18
    10b8:	8c 93       	st	X, r24
	TMR2_delay(1);
    10ba:	61 e0       	ldi	r22, 0x01	; 1
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,LOW);       /* Disable Signal */
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    10da:	83 e0       	ldi	r24, 0x03	; 3
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
}
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <LCD_displayChar>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_displayChar(uint8 character){
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	0f 92       	push	r0
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	89 83       	std	Y+1, r24	; 0x01
	/* Control Signals Configuration */
	DIO_WritePin(Register_Select,HIGH);  /* Select data register */
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(Read_Write,LOW);		/* Write operation */
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	/* Sending High nibble */
	PORTA = (PORTA & 0x0F) | (character & 0xF0);
    1126:	ab e3       	ldi	r26, 0x3B	; 59
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	eb e3       	ldi	r30, 0x3B	; 59
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	98 2f       	mov	r25, r24
    1132:	9f 70       	andi	r25, 0x0F	; 15
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	80 7f       	andi	r24, 0xF0	; 240
    1138:	89 2b       	or	r24, r25
    113a:	8c 93       	st	X, r24
	TMR2_delay(1);
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,LOW);       /* Disable Signal */
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    1164:	61 e0       	ldi	r22, 0x01	; 1
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>

	/* Sending low nibble */
	PORTA = (PORTA & 0x0F) | ((character & 0x0F) << 4 );
    1170:	ab e3       	ldi	r26, 0x3B	; 59
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	eb e3       	ldi	r30, 0x3B	; 59
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	28 2f       	mov	r18, r24
    117c:	2f 70       	andi	r18, 0x0F	; 15
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	82 95       	swap	r24
    1186:	92 95       	swap	r25
    1188:	90 7f       	andi	r25, 0xF0	; 240
    118a:	98 27       	eor	r25, r24
    118c:	80 7f       	andi	r24, 0xF0	; 240
    118e:	98 27       	eor	r25, r24
    1190:	82 2b       	or	r24, r18
    1192:	8c 93       	st	X, r24
	TMR2_delay(1);
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,LOW);       /* Disable Signal */
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	DIO_WritePin(Enable_LCD,HIGH);		/* Enable Signal */
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	TMR2_delay(1);
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LCD_gotoRowColumn>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_gotoRowColumn(uint8 LINE,uint8 COLUMN){
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <LCD_gotoRowColumn+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <LCD_gotoRowColumn+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	6a 83       	std	Y+2, r22	; 0x02
	if ( ( COLUMN > COLUMN_MIN ) && ( COLUMN <= COLUMN_MAX ) ){
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 23       	and	r24, r24
    11e4:	e1 f0       	breq	.+56     	; 0x121e <LCD_gotoRowColumn+0x4e>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	81 31       	cpi	r24, 0x11	; 17
    11ea:	c8 f4       	brcc	.+50     	; 0x121e <LCD_gotoRowColumn+0x4e>
		switch (LINE)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	31 f0       	breq	.+12     	; 0x120c <LCD_gotoRowColumn+0x3c>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	31 f0       	breq	.+12     	; 0x1216 <LCD_gotoRowColumn+0x46>
    120a:	09 c0       	rjmp	.+18     	; 0x121e <LCD_gotoRowColumn+0x4e>
		{
			case LINE_1 :	LCD_sendCommand( ( lcd_line_1_address ) + ( COLUMN ) );
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	81 58       	subi	r24, 0x81	; 129
    1210:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
    1214:	04 c0       	rjmp	.+8      	; 0x121e <LCD_gotoRowColumn+0x4e>
							break;

			case LINE_2 :	LCD_sendCommand( ( lcd_line_2_address ) + ( COLUMN ) );
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	81 54       	subi	r24, 0x41	; 65
    121a:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
		}
	}else{
		/* Do Nothing */
	}

}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <LCD_displayString>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_displayString(uint8 string[]){
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <LCD_displayString+0x6>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	9b 83       	std	Y+3, r25	; 0x03
    123a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 iterator = 0;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	0e c0       	rjmp	.+28     	; 0x125c <LCD_displayString+0x30>
	while(string[iterator] != '\0')
	{
		LCD_displayChar(string[iterator]);
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	fc 01       	movw	r30, r24
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	80 81       	ld	r24, Z
    1252:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_displayChar>
		iterator++;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	89 83       	std	Y+1, r24	; 0x01
 *
 * Return:
 *******************************************************************************/
void LCD_displayString(uint8 string[]){
	uint8 iterator = 0;
	while(string[iterator] != '\0')
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	fc 01       	movw	r30, r24
    1268:	e2 0f       	add	r30, r18
    126a:	f3 1f       	adc	r31, r19
    126c:	80 81       	ld	r24, Z
    126e:	88 23       	and	r24, r24
    1270:	39 f7       	brne	.-50     	; 0x1240 <LCD_displayString+0x14>
	{
		LCD_displayChar(string[iterator]);
		iterator++;
	}
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <LCD_displayStringRowColumn>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_displayStringRowColumn(uint8 string[],uint8 row, uint8 column){
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <LCD_displayStringRowColumn+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <LCD_displayStringRowColumn+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	6b 83       	std	Y+3, r22	; 0x03
    1290:	4c 83       	std	Y+4, r20	; 0x04
	LCD_gotoRowColumn(row,column);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	6c 81       	ldd	r22, Y+4	; 0x04
    1296:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_gotoRowColumn>
	LCD_displayString(string);
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	0e 94 16 09 	call	0x122c	; 0x122c <LCD_displayString>
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <LCD_clear>:
 *
 * Outputs:
 *
 * Return:
 *******************************************************************************/
void LCD_clear(void){
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(Clear_display);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
	TMR2_delay(100);
    12be:	64 e6       	ldi	r22, 0x64	; 100
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 c4 03 	call	0x788	; 0x788 <TMR2_delay>
	LCD_sendCommand(Return_home);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	0e 94 0e 08 	call	0x101c	; 0x101c <LCD_sendCommand>
}
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <reverse>:



// a function to reverse a string
void reverse (uint8 *str, uint8 length)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <reverse+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <reverse+0x8>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <reverse+0xa>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	9d 83       	std	Y+5, r25	; 0x05
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	6e 83       	std	Y+6, r22	; 0x06
	uint8 start = 0;
    12ea:	1b 82       	std	Y+3, r1	; 0x03
	uint8 end = length-1;
    12ec:	8e 81       	ldd	r24, Y+6	; 0x06
    12ee:	81 50       	subi	r24, 0x01	; 1
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	2c c0       	rjmp	.+88     	; 0x134c <reverse+0x76>
	while( start < end )
	{
		uint8 temp = str[start] ;
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	fc 01       	movw	r30, r24
    1300:	e2 0f       	add	r30, r18
    1302:	f3 1f       	adc	r31, r19
    1304:	80 81       	ld	r24, Z
    1306:	89 83       	std	Y+1, r24	; 0x01

		str[start] = str[end];
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	dc 01       	movw	r26, r24
    1314:	a2 0f       	add	r26, r18
    1316:	b3 1f       	adc	r27, r19
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	fc 01       	movw	r30, r24
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	80 81       	ld	r24, Z
    132a:	8c 93       	st	X, r24

		str[end] = temp;
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	fc 01       	movw	r30, r24
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	80 83       	st	Z, r24

		start++;
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	81 50       	subi	r24, 0x01	; 1
    134a:	8a 83       	std	Y+2, r24	; 0x02
// a function to reverse a string
void reverse (uint8 *str, uint8 length)
{
	uint8 start = 0;
	uint8 end = length-1;
	while( start < end )
    134c:	9b 81       	ldd	r25, Y+3	; 0x03
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	98 17       	cp	r25, r24
    1352:	80 f2       	brcs	.-96     	; 0x12f4 <reverse+0x1e>

		start++;
		end--;
	}

}
    1354:	26 96       	adiw	r28, 0x06	; 6
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <integer_to_string>:

uint8* integer_to_string (sint32 number,uint8* str,uint8 base){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	2c 97       	sbiw	r28, 0x0c	; 12
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	6c 83       	std	Y+4, r22	; 0x04
    137c:	7d 83       	std	Y+5, r23	; 0x05
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	9f 83       	std	Y+7, r25	; 0x07
    1382:	59 87       	std	Y+9, r21	; 0x09
    1384:	48 87       	std	Y+8, r20	; 0x08
    1386:	2a 87       	std	Y+10, r18	; 0x0a
	// index for length

	uint8 i = 0;
    1388:	1b 82       	std	Y+3, r1	; 0x03
	uint8 isNegative = 0;
    138a:	1a 82       	std	Y+2, r1	; 0x02

	// Handle 0 explicitely

	if (number == 0)
    138c:	8c 81       	ldd	r24, Y+4	; 0x04
    138e:	9d 81       	ldd	r25, Y+5	; 0x05
    1390:	ae 81       	ldd	r26, Y+6	; 0x06
    1392:	bf 81       	ldd	r27, Y+7	; 0x07
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	a1 05       	cpc	r26, r1
    1398:	b1 05       	cpc	r27, r1
    139a:	d9 f4       	brne	.+54     	; 0x13d2 <integer_to_string+0x6c>
	{
		str[i++] = '0';
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	88 85       	ldd	r24, Y+8	; 0x08
    13a4:	99 85       	ldd	r25, Y+9	; 0x09
    13a6:	fc 01       	movw	r30, r24
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	80 83       	st	Z, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	8b 83       	std	Y+3, r24	; 0x03
		str[i] = '\0';  // the end of the string
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	88 85       	ldd	r24, Y+8	; 0x08
    13be:	99 85       	ldd	r25, Y+9	; 0x09
    13c0:	fc 01       	movw	r30, r24
    13c2:	e2 0f       	add	r30, r18
    13c4:	f3 1f       	adc	r31, r19
    13c6:	10 82       	st	Z, r1
		return str;
    13c8:	88 85       	ldd	r24, Y+8	; 0x08
    13ca:	99 85       	ldd	r25, Y+9	; 0x09
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	8b 87       	std	Y+11, r24	; 0x0b
    13d0:	8b c0       	rjmp	.+278    	; 0x14e8 <integer_to_string+0x182>
	}

	// negative numbers are handled only with
	// base 10. Otherwise numbers are considered unsigned

	if (number <0 && base ==10)
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	ae 81       	ldd	r26, Y+6	; 0x06
    13d8:	bf 81       	ldd	r27, Y+7	; 0x07
    13da:	bb 23       	and	r27, r27
    13dc:	0c f0       	brlt	.+2      	; 0x13e0 <integer_to_string+0x7a>
    13de:	59 c0       	rjmp	.+178    	; 0x1492 <integer_to_string+0x12c>
    13e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e2:	8a 30       	cpi	r24, 0x0A	; 10
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <integer_to_string+0x82>
    13e6:	55 c0       	rjmp	.+170    	; 0x1492 <integer_to_string+0x12c>
	{
		isNegative = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	8a 83       	std	Y+2, r24	; 0x02
		number = -number; // to get the absolute value of the number
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	ae 81       	ldd	r26, Y+6	; 0x06
    13f2:	bf 81       	ldd	r27, Y+7	; 0x07
    13f4:	b0 95       	com	r27
    13f6:	a0 95       	com	r26
    13f8:	90 95       	com	r25
    13fa:	81 95       	neg	r24
    13fc:	9f 4f       	sbci	r25, 0xFF	; 255
    13fe:	af 4f       	sbci	r26, 0xFF	; 255
    1400:	bf 4f       	sbci	r27, 0xFF	; 255
    1402:	8c 83       	std	Y+4, r24	; 0x04
    1404:	9d 83       	std	Y+5, r25	; 0x05
    1406:	ae 83       	std	Y+6, r26	; 0x06
    1408:	bf 83       	std	Y+7, r27	; 0x07
    140a:	43 c0       	rjmp	.+134    	; 0x1492 <integer_to_string+0x12c>
	}

	while (number != 0)
	{

		uint8 remainder = number % base ;
    140c:	8a 85       	ldd	r24, Y+10	; 0x0a
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	ae 81       	ldd	r26, Y+6	; 0x06
    141c:	bf 81       	ldd	r27, Y+7	; 0x07
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__divmodsi4>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	89 83       	std	Y+1, r24	; 0x01
		if (remainder > 9)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	8a 30       	cpi	r24, 0x0A	; 10
    1430:	78 f0       	brcs	.+30     	; 0x1450 <integer_to_string+0xea>
		{
			str[i++] = (remainder-10) + 'A';  // for hexa-decimal only
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	88 85       	ldd	r24, Y+8	; 0x08
    143a:	99 85       	ldd	r25, Y+9	; 0x09
    143c:	fc 01       	movw	r30, r24
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	89 5c       	subi	r24, 0xC9	; 201
    1446:	80 83       	st	Z, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	8b 83       	std	Y+3, r24	; 0x03
    144e:	0e c0       	rjmp	.+28     	; 0x146c <integer_to_string+0x106>

		}
		else
		{
			str[i++] = remainder + '0';
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	88 85       	ldd	r24, Y+8	; 0x08
    1458:	99 85       	ldd	r25, Y+9	; 0x09
    145a:	fc 01       	movw	r30, r24
    145c:	e2 0f       	add	r30, r18
    145e:	f3 1f       	adc	r31, r19
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	80 5d       	subi	r24, 0xD0	; 208
    1464:	80 83       	st	Z, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	8b 83       	std	Y+3, r24	; 0x03
		}
		number=number/base;
    146c:	8a 85       	ldd	r24, Y+10	; 0x0a
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	ae 81       	ldd	r26, Y+6	; 0x06
    147c:	bf 81       	ldd	r27, Y+7	; 0x07
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__divmodsi4>
    1486:	da 01       	movw	r26, r20
    1488:	c9 01       	movw	r24, r18
    148a:	8c 83       	std	Y+4, r24	; 0x04
    148c:	9d 83       	std	Y+5, r25	; 0x05
    148e:	ae 83       	std	Y+6, r26	; 0x06
    1490:	bf 83       	std	Y+7, r27	; 0x07
	{
		isNegative = 1;
		number = -number; // to get the absolute value of the number
	}

	while (number != 0)
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	ae 81       	ldd	r26, Y+6	; 0x06
    1498:	bf 81       	ldd	r27, Y+7	; 0x07
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	a1 05       	cpc	r26, r1
    149e:	b1 05       	cpc	r27, r1
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <integer_to_string+0x13e>
    14a2:	b4 cf       	rjmp	.-152    	; 0x140c <integer_to_string+0xa6>
			str[i++] = remainder + '0';
		}
		number=number/base;
	}

	if (isNegative)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 23       	and	r24, r24
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <integer_to_string+0x15e>
	{
		str[i++] = '-';
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	88 85       	ldd	r24, Y+8	; 0x08
    14b2:	99 85       	ldd	r25, Y+9	; 0x09
    14b4:	fc 01       	movw	r30, r24
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	8d e2       	ldi	r24, 0x2D	; 45
    14bc:	80 83       	st	Z, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	8b 83       	std	Y+3, r24	; 0x03
	}

	str[i] = '\0';  // the end of the string
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	88 85       	ldd	r24, Y+8	; 0x08
    14cc:	99 85       	ldd	r25, Y+9	; 0x09
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	10 82       	st	Z, r1

	reverse(str,i); // where i  index for the length of the string
    14d6:	88 85       	ldd	r24, Y+8	; 0x08
    14d8:	99 85       	ldd	r25, Y+9	; 0x09
    14da:	6b 81       	ldd	r22, Y+3	; 0x03
    14dc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <reverse>

	return str;
    14e0:	88 85       	ldd	r24, Y+8	; 0x08
    14e2:	99 85       	ldd	r25, Y+9	; 0x09
    14e4:	9c 87       	std	Y+12, r25	; 0x0c
    14e6:	8b 87       	std	Y+11, r24	; 0x0b
    14e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ea:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    14ec:	2c 96       	adiw	r28, 0x0c	; 12
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <LCD_DispalyNumber>:

 void LCD_DispalyNumber(uint32 x)
{
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	28 97       	sbiw	r28, 0x08	; 8
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	6d 83       	std	Y+5, r22	; 0x05
    151c:	7e 83       	std	Y+6, r23	; 0x06
    151e:	8f 83       	std	Y+7, r24	; 0x07
    1520:	98 87       	std	Y+8, r25	; 0x08
	uint32 y = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	9a 83       	std	Y+2, r25	; 0x02
    152e:	ab 83       	std	Y+3, r26	; 0x03
    1530:	bc 83       	std	Y+4, r27	; 0x04
	if (x == 0)
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	af 81       	ldd	r26, Y+7	; 0x07
    1538:	b8 85       	ldd	r27, Y+8	; 0x08
    153a:	00 97       	sbiw	r24, 0x00	; 0
    153c:	a1 05       	cpc	r26, r1
    153e:	b1 05       	cpc	r27, r1
    1540:	d1 f5       	brne	.+116    	; 0x15b6 <LCD_DispalyNumber+0xb8>
	{
		LCD_displayChar('0');
    1542:	80 e3       	ldi	r24, 0x30	; 48
    1544:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_displayChar>
    1548:	36 c0       	rjmp	.+108    	; 0x15b6 <LCD_DispalyNumber+0xb8>
	if (x < 0) {
		LCD_displayChar('-');
		x *= -1;
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	ab 81       	ldd	r26, Y+3	; 0x03
    1550:	bc 81       	ldd	r27, Y+4	; 0x04
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__mulsi3>
    1562:	7b 01       	movw	r14, r22
    1564:	8c 01       	movw	r16, r24
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	af 81       	ldd	r26, Y+7	; 0x07
    156c:	b8 85       	ldd	r27, Y+8	; 0x08
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	50 e0       	ldi	r21, 0x00	; 0
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8e 0d       	add	r24, r14
    1584:	9f 1d       	adc	r25, r15
    1586:	a0 1f       	adc	r26, r16
    1588:	b1 1f       	adc	r27, r17
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	ab 83       	std	Y+3, r26	; 0x03
    1590:	bc 83       	std	Y+4, r27	; 0x04
		x = (x / 10);
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	af 81       	ldd	r26, Y+7	; 0x07
    1598:	b8 85       	ldd	r27, Y+8	; 0x08
    159a:	2a e0       	ldi	r18, 0x0A	; 10
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
    15aa:	da 01       	movw	r26, r20
    15ac:	c9 01       	movw	r24, r18
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	af 83       	std	Y+7, r26	; 0x07
    15b4:	b8 87       	std	Y+8, r27	; 0x08
	}
	if (x < 0) {
		LCD_displayChar('-');
		x *= -1;
	}
	while (x != 0) {
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	af 81       	ldd	r26, Y+7	; 0x07
    15bc:	b8 85       	ldd	r27, Y+8	; 0x08
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	a1 05       	cpc	r26, r1
    15c2:	b1 05       	cpc	r27, r1
    15c4:	11 f6       	brne	.-124    	; 0x154a <LCD_DispalyNumber+0x4c>
    15c6:	23 c0       	rjmp	.+70     	; 0x160e <LCD_DispalyNumber+0x110>
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
		LCD_displayChar((y % 10) + 48);
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	ab 81       	ldd	r26, Y+3	; 0x03
    15ce:	bc 81       	ldd	r27, Y+4	; 0x04
    15d0:	2a e0       	ldi	r18, 0x0A	; 10
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	80 5d       	subi	r24, 0xD0	; 208
    15e6:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <LCD_displayChar>
		y = (y / 10);
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	ab 81       	ldd	r26, Y+3	; 0x03
    15f0:	bc 81       	ldd	r27, Y+4	; 0x04
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
    1602:	da 01       	movw	r26, r20
    1604:	c9 01       	movw	r24, r18
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	ab 83       	std	Y+3, r26	; 0x03
    160c:	bc 83       	std	Y+4, r27	; 0x04
	}
	while (x != 0) {
		y = ((y * 10) + (x % 10));
		x = (x / 10);
	}
	while (y != 1) {
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	ab 81       	ldd	r26, Y+3	; 0x03
    1614:	bc 81       	ldd	r27, Y+4	; 0x04
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	91 05       	cpc	r25, r1
    161a:	a1 05       	cpc	r26, r1
    161c:	b1 05       	cpc	r27, r1
    161e:	a1 f6       	brne	.-88     	; 0x15c8 <LCD_DispalyNumber+0xca>
		LCD_displayChar((y % 10) + 48);
		y = (y / 10);
	}
}
    1620:	28 96       	adiw	r28, 0x08	; 8
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	1f 91       	pop	r17
    1632:	0f 91       	pop	r16
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	08 95       	ret

0000163a <main>:
#include "LCD.h"
#include"os_interface.h"
#include "infotainment.h"

int main(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62

	LCD_init();
    1642:	0e 94 c4 07 	call	0xf88	; 0xf88 <LCD_init>
	Keypad_init();
    1646:	0e 94 2f 05 	call	0xa5e	; 0xa5e <Keypad_init>
	OS_voidStart();
    164a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <OS_voidStart>
	OS_voidCreateTask(Infotainment_Task, 10, 2);
    164e:	89 e0       	ldi	r24, 0x09	; 9
    1650:	94 e0       	ldi	r25, 0x04	; 4
    1652:	6a e0       	ldi	r22, 0x0A	; 10
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	42 e0       	ldi	r20, 0x02	; 2
    1658:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OS_voidCreateTask>
	OS_voidCreateTask(Infotainment_Delay_2Sec, 2000, 3);
    165c:	88 e1       	ldi	r24, 0x18	; 24
    165e:	95 e0       	ldi	r25, 0x05	; 5
    1660:	60 ed       	ldi	r22, 0xD0	; 208
    1662:	77 e0       	ldi	r23, 0x07	; 7
    1664:	43 e0       	ldi	r20, 0x03	; 3
    1666:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OS_voidCreateTask>
	OS_voidCreateTask(Infotainment_Delay_5Sec, 2000, 4);
    166a:	82 e2       	ldi	r24, 0x22	; 34
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	60 ed       	ldi	r22, 0xD0	; 208
    1670:	77 e0       	ldi	r23, 0x07	; 7
    1672:	44 e0       	ldi	r20, 0x04	; 4
    1674:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OS_voidCreateTask>
	OS_voidCreateTask(Keypad_UpdateState, 20, 1);
    1678:	81 ea       	ldi	r24, 0xA1	; 161
    167a:	95 e0       	ldi	r25, 0x05	; 5
    167c:	64 e1       	ldi	r22, 0x14	; 20
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 4a 0b 	call	0x1694	; 0x1694 <OS_voidCreateTask>
	os_run();
    1686:	0e 94 55 0c 	call	0x18aa	; 0x18aa <os_run>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <OS_voidCreateTask>:
	Function_state_s State;
}TCB;
TCB SysTasks [NUM_OF_TASKS];
/*******creating task ***/
void  OS_voidCreateTask(void(*TaskHandler)(void),uint16 periodicity,uint8 priority)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <OS_voidCreateTask+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <OS_voidCreateTask+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	7c 83       	std	Y+4, r23	; 0x04
    16a8:	6b 83       	std	Y+3, r22	; 0x03
    16aa:	4d 83       	std	Y+5, r20	; 0x05
	if(check_array[priority]==0)
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	fc 01       	movw	r30, r24
    16b4:	ec 5d       	subi	r30, 0xDC	; 220
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	80 81       	ld	r24, Z
    16ba:	88 23       	and	r24, r24
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <OS_voidCreateTask+0x2c>
    16be:	48 c0       	rjmp	.+144    	; 0x1750 <OS_voidCreateTask+0xbc>
	{
		SysTasks [priority].Ptr_TaskHandler=TaskHandler;
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	c9 01       	movw	r24, r18
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	82 0f       	add	r24, r18
    16ce:	93 1f       	adc	r25, r19
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	fc 01       	movw	r30, r24
    16d6:	e4 5f       	subi	r30, 0xF4	; 244
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
			SysTasks [priority].periodicity=periodicity;
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	c9 01       	movw	r24, r18
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	82 0f       	add	r24, r18
    16f0:	93 1f       	adc	r25, r19
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	fc 01       	movw	r30, r24
    16fa:	e4 5f       	subi	r30, 0xF4	; 244
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	80 83       	st	Z, r24
			SysTasks [priority].priority=priority;
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	c9 01       	movw	r24, r18
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	82 0f       	add	r24, r18
    1714:	93 1f       	adc	r25, r19
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	fc 01       	movw	r30, r24
    171c:	e0 5f       	subi	r30, 0xF0	; 240
    171e:	fe 4f       	sbci	r31, 0xFE	; 254
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	80 83       	st	Z, r24
			SysTasks [priority].State=ready;
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	c9 01       	movw	r24, r18
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	82 0f       	add	r24, r18
    1732:	93 1f       	adc	r25, r19
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	fc 01       	movw	r30, r24
    173a:	ef 5e       	subi	r30, 0xEF	; 239
    173c:	fe 4f       	sbci	r31, 0xFE	; 254
    173e:	10 82       	st	Z, r1
			check_array[priority]=1;
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	88 2f       	mov	r24, r24
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	ec 5d       	subi	r30, 0xDC	; 220
    174a:	fe 4f       	sbci	r31, 0xFE	; 254
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 83       	st	Z, r24


	else
	{
	}
}
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <OS_voidStart>:
/*******Starting timer interrupt and assigning values with zeros and nulls at the beginnning *********/
EnumOSError_t OS_voidStart(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	TMR_vidInit_ctc(ticktime);
    176a:	80 91 de 00 	lds	r24, 0x00DE
    176e:	90 91 df 00 	lds	r25, 0x00DF
    1772:	0e 94 b7 02 	call	0x56e	; 0x56e <TMR_vidInit_ctc>
	TIMER_interruptEnable();
    1776:	0e 94 fd 02 	call	0x5fa	; 0x5fa <TIMER_interruptEnable>
	OS_SetCallBack(OS_Longterm);
    177a:	85 eb       	ldi	r24, 0xB5	; 181
    177c:	9c e0       	ldi	r25, 0x0C	; 12
    177e:	0e 94 6d 03 	call	0x6da	; 0x6da <OS_SetCallBack>
	uint8 SOSLoopcounter;
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    1782:	19 82       	std	Y+1, r1	; 0x01
    1784:	3e c0       	rjmp	.+124    	; 0x1802 <OS_voidStart+0xa2>
	{
		SysTasks [SOSLoopcounter].Ptr_TaskHandler=NULL;
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	c9 01       	movw	r24, r18
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	fc 01       	movw	r30, r24
    179c:	e4 5f       	subi	r30, 0xF4	; 244
    179e:	fe 4f       	sbci	r31, 0xFE	; 254
    17a0:	11 82       	std	Z+1, r1	; 0x01
    17a2:	10 82       	st	Z, r1
		SysTasks [SOSLoopcounter].periodicity=0;;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	c9 01       	movw	r24, r18
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	82 0f       	add	r24, r18
    17b2:	93 1f       	adc	r25, r19
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	fc 01       	movw	r30, r24
    17bc:	e4 5f       	subi	r30, 0xF4	; 244
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	11 82       	std	Z+1, r1	; 0x01
    17c2:	10 82       	st	Z, r1
		SysTasks [SOSLoopcounter].priority=0;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	c9 01       	movw	r24, r18
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	fc 01       	movw	r30, r24
    17da:	e0 5f       	subi	r30, 0xF0	; 240
    17dc:	fe 4f       	sbci	r31, 0xFE	; 254
    17de:	10 82       	st	Z, r1
		SysTasks [SOSLoopcounter].State=0;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	c9 01       	movw	r24, r18
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	88 0f       	add	r24, r24
    17f2:	99 1f       	adc	r25, r25
    17f4:	fc 01       	movw	r30, r24
    17f6:	ef 5e       	subi	r30, 0xEF	; 239
    17f8:	fe 4f       	sbci	r31, 0xFE	; 254
    17fa:	10 82       	st	Z, r1
{
	TMR_vidInit_ctc(ticktime);
	TIMER_interruptEnable();
	OS_SetCallBack(OS_Longterm);
	uint8 SOSLoopcounter;
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	8f 5f       	subi	r24, 0xFF	; 255
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	08 f4       	brcc	.+2      	; 0x180a <OS_voidStart+0xaa>
    1808:	be cf       	rjmp	.-132    	; 0x1786 <OS_voidStart+0x26>
		SysTasks [SOSLoopcounter].periodicity=0;;
		SysTasks [SOSLoopcounter].priority=0;
		SysTasks [SOSLoopcounter].State=0;

	}
	return Success;
    180a:	80 e0       	ldi	r24, 0x00	; 0

}
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <OS_voidDelete>:
/*********function to delete the task you want ******/
EnumOSError_t OS_voidDelete( void(*taskDelete)(void))
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <OS_voidDelete+0x6>
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	9b 83       	std	Y+3, r25	; 0x03
    1822:	8a 83       	std	Y+2, r24	; 0x02
	uint8 SOSLoopcounter;
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	37 c0       	rjmp	.+110    	; 0x1896 <OS_voidDelete+0x82>
	{
		if(SysTasks [SOSLoopcounter].Ptr_TaskHandler==taskDelete)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	c9 01       	movw	r24, r18
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	82 0f       	add	r24, r18
    1836:	93 1f       	adc	r25, r19
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	fc 01       	movw	r30, r24
    183e:	e4 5f       	subi	r30, 0xF4	; 244
    1840:	fe 4f       	sbci	r31, 0xFE	; 254
    1842:	20 81       	ld	r18, Z
    1844:	31 81       	ldd	r19, Z+1	; 0x01
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	28 17       	cp	r18, r24
    184c:	39 07       	cpc	r19, r25
    184e:	01 f5       	brne	.+64     	; 0x1890 <OS_voidDelete+0x7c>
		{
			SysTasks [SOSLoopcounter].Ptr_TaskHandler=NULL;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	c9 01       	movw	r24, r18
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	fc 01       	movw	r30, r24
    1866:	e4 5f       	subi	r30, 0xF4	; 244
    1868:	fe 4f       	sbci	r31, 0xFE	; 254
    186a:	11 82       	std	Z+1, r1	; 0x01
    186c:	10 82       	st	Z, r1
			SysTasks [SOSLoopcounter].periodicity=0;
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	c9 01       	movw	r24, r18
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	82 0f       	add	r24, r18
    187c:	93 1f       	adc	r25, r19
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	fc 01       	movw	r30, r24
    1886:	e4 5f       	subi	r30, 0xF4	; 244
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	11 82       	std	Z+1, r1	; 0x01
    188c:	10 82       	st	Z, r1
    188e:	06 c0       	rjmp	.+12     	; 0x189c <OS_voidDelete+0x88>
}
/*********function to delete the task you want ******/
EnumOSError_t OS_voidDelete( void(*taskDelete)(void))
{
	uint8 SOSLoopcounter;
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	30 f2       	brcs	.-116    	; 0x1828 <OS_voidDelete+0x14>

		}


	}
	return Success;
    189c:	80 e0       	ldi	r24, 0x00	; 0

}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <os_run>:
/********check which function should run****/
EnumOSError_t os_run(void)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
	uint8 SOSLoopcounter;
	while(1)
	{
		for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    18b4:	19 82       	std	Y+1, r1	; 0x01
    18b6:	54 c0       	rjmp	.+168    	; 0x1960 <os_run+0xb6>
		{
			if(	(SysTasks [SOSLoopcounter].State==ready)&&(SysTasks[SOSLoopcounter].Ptr_TaskHandler!=NULL))
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	c9 01       	movw	r24, r18
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	82 0f       	add	r24, r18
    18c6:	93 1f       	adc	r25, r19
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	fc 01       	movw	r30, r24
    18ce:	ef 5e       	subi	r30, 0xEF	; 239
    18d0:	fe 4f       	sbci	r31, 0xFE	; 254
    18d2:	80 81       	ld	r24, Z
    18d4:	88 23       	and	r24, r24
    18d6:	09 f0       	breq	.+2      	; 0x18da <os_run+0x30>
    18d8:	40 c0       	rjmp	.+128    	; 0x195a <os_run+0xb0>
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	c9 01       	movw	r24, r18
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	82 0f       	add	r24, r18
    18e8:	93 1f       	adc	r25, r19
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	fc 01       	movw	r30, r24
    18f0:	e4 5f       	subi	r30, 0xF4	; 244
    18f2:	fe 4f       	sbci	r31, 0xFE	; 254
    18f4:	80 81       	ld	r24, Z
    18f6:	91 81       	ldd	r25, Z+1	; 0x01
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	79 f1       	breq	.+94     	; 0x195a <os_run+0xb0>
			{
				SysTasks [SOSLoopcounter].State=running;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	c9 01       	movw	r24, r18
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	fc 01       	movw	r30, r24
    1912:	ef 5e       	subi	r30, 0xEF	; 239
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	80 83       	st	Z, r24
				SysTasks[SOSLoopcounter].Ptr_TaskHandler();
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	c9 01       	movw	r24, r18
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	82 0f       	add	r24, r18
    1928:	93 1f       	adc	r25, r19
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	fc 01       	movw	r30, r24
    1930:	e4 5f       	subi	r30, 0xF4	; 244
    1932:	fe 4f       	sbci	r31, 0xFE	; 254
    1934:	01 90       	ld	r0, Z+
    1936:	f0 81       	ld	r31, Z
    1938:	e0 2d       	mov	r30, r0
    193a:	09 95       	icall
				SysTasks [SOSLoopcounter].State=waiting;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	c9 01       	movw	r24, r18
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	82 0f       	add	r24, r18
    194a:	93 1f       	adc	r25, r19
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	fc 01       	movw	r30, r24
    1952:	ef 5e       	subi	r30, 0xEF	; 239
    1954:	fe 4f       	sbci	r31, 0xFE	; 254
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 83       	st	Z, r24
EnumOSError_t os_run(void)
{
	uint8 SOSLoopcounter;
	while(1)
	{
		for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	08 f4       	brcc	.+2      	; 0x1968 <os_run+0xbe>
    1966:	a8 cf       	rjmp	.-176    	; 0x18b8 <os_run+0xe>
    1968:	a5 cf       	rjmp	.-182    	; 0x18b4 <os_run+0xa>

0000196a <OS_Longterm>:
	}
	return Success;
}
/**************interrupt to check if the timer time to execute has come or not *********/
void OS_Longterm (void)
{
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
	/*****Check for the indices of the arrays***/
	uint8 SOSLoopcounter;
	/******variable to count number of ticks *****/
	sos_u32_Tickcounter++;
    197c:	80 91 08 01 	lds	r24, 0x0108
    1980:	90 91 09 01 	lds	r25, 0x0109
    1984:	a0 91 0a 01 	lds	r26, 0x010A
    1988:	b0 91 0b 01 	lds	r27, 0x010B
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	a1 1d       	adc	r26, r1
    1990:	b1 1d       	adc	r27, r1
    1992:	80 93 08 01 	sts	0x0108, r24
    1996:	90 93 09 01 	sts	0x0109, r25
    199a:	a0 93 0a 01 	sts	0x010A, r26
    199e:	b0 93 0b 01 	sts	0x010B, r27
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	36 c0       	rjmp	.+108    	; 0x1a12 <OS_Longterm+0xa8>
	{
		if(sos_u32_Tickcounter % SysTasks [SOSLoopcounter].periodicity==0)/*****check if the function time came or not ****/
    19a6:	e0 90 08 01 	lds	r14, 0x0108
    19aa:	f0 90 09 01 	lds	r15, 0x0109
    19ae:	00 91 0a 01 	lds	r16, 0x010A
    19b2:	10 91 0b 01 	lds	r17, 0x010B
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	c9 01       	movw	r24, r18
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	fc 01       	movw	r30, r24
    19ce:	e4 5f       	subi	r30, 0xF4	; 244
    19d0:	fe 4f       	sbci	r31, 0xFE	; 254
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	9c 01       	movw	r18, r24
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	c8 01       	movw	r24, r16
    19de:	b7 01       	movw	r22, r14
    19e0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__udivmodsi4>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	a1 05       	cpc	r26, r1
    19ec:	b1 05       	cpc	r27, r1
    19ee:	71 f4       	brne	.+28     	; 0x1a0c <OS_Longterm+0xa2>
		{
			SysTasks [SOSLoopcounter].State=ready;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	c9 01       	movw	r24, r18
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	82 0f       	add	r24, r18
    19fe:	93 1f       	adc	r25, r19
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	fc 01       	movw	r30, r24
    1a06:	ef 5e       	subi	r30, 0xEF	; 239
    1a08:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0a:	10 82       	st	Z, r1
{
	/*****Check for the indices of the arrays***/
	uint8 SOSLoopcounter;
	/******variable to count number of ticks *****/
	sos_u32_Tickcounter++;
	for(SOSLoopcounter=0;SOSLoopcounter<NUM_OF_TASKS;SOSLoopcounter++)
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	8f 5f       	subi	r24, 0xFF	; 255
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	38 f2       	brcs	.-114    	; 0x19a6 <OS_Longterm+0x3c>
		}
		else
		{
		}
	}
}
    1a18:	0f 90       	pop	r0
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	1f 91       	pop	r17
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	08 95       	ret

00001a28 <__mulsi3>:
    1a28:	62 9f       	mul	r22, r18
    1a2a:	d0 01       	movw	r26, r0
    1a2c:	73 9f       	mul	r23, r19
    1a2e:	f0 01       	movw	r30, r0
    1a30:	82 9f       	mul	r24, r18
    1a32:	e0 0d       	add	r30, r0
    1a34:	f1 1d       	adc	r31, r1
    1a36:	64 9f       	mul	r22, r20
    1a38:	e0 0d       	add	r30, r0
    1a3a:	f1 1d       	adc	r31, r1
    1a3c:	92 9f       	mul	r25, r18
    1a3e:	f0 0d       	add	r31, r0
    1a40:	83 9f       	mul	r24, r19
    1a42:	f0 0d       	add	r31, r0
    1a44:	74 9f       	mul	r23, r20
    1a46:	f0 0d       	add	r31, r0
    1a48:	65 9f       	mul	r22, r21
    1a4a:	f0 0d       	add	r31, r0
    1a4c:	99 27       	eor	r25, r25
    1a4e:	72 9f       	mul	r23, r18
    1a50:	b0 0d       	add	r27, r0
    1a52:	e1 1d       	adc	r30, r1
    1a54:	f9 1f       	adc	r31, r25
    1a56:	63 9f       	mul	r22, r19
    1a58:	b0 0d       	add	r27, r0
    1a5a:	e1 1d       	adc	r30, r1
    1a5c:	f9 1f       	adc	r31, r25
    1a5e:	bd 01       	movw	r22, r26
    1a60:	cf 01       	movw	r24, r30
    1a62:	11 24       	eor	r1, r1
    1a64:	08 95       	ret

00001a66 <__udivmodsi4>:
    1a66:	a1 e2       	ldi	r26, 0x21	; 33
    1a68:	1a 2e       	mov	r1, r26
    1a6a:	aa 1b       	sub	r26, r26
    1a6c:	bb 1b       	sub	r27, r27
    1a6e:	fd 01       	movw	r30, r26
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <__udivmodsi4_ep>

00001a72 <__udivmodsi4_loop>:
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	ee 1f       	adc	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	a2 17       	cp	r26, r18
    1a7c:	b3 07       	cpc	r27, r19
    1a7e:	e4 07       	cpc	r30, r20
    1a80:	f5 07       	cpc	r31, r21
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <__udivmodsi4_ep>
    1a84:	a2 1b       	sub	r26, r18
    1a86:	b3 0b       	sbc	r27, r19
    1a88:	e4 0b       	sbc	r30, r20
    1a8a:	f5 0b       	sbc	r31, r21

00001a8c <__udivmodsi4_ep>:
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a 94       	dec	r1
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <__udivmodsi4_loop>
    1a98:	60 95       	com	r22
    1a9a:	70 95       	com	r23
    1a9c:	80 95       	com	r24
    1a9e:	90 95       	com	r25
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	bd 01       	movw	r22, r26
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	08 95       	ret

00001aaa <__divmodsi4>:
    1aaa:	97 fb       	bst	r25, 7
    1aac:	09 2e       	mov	r0, r25
    1aae:	05 26       	eor	r0, r21
    1ab0:	0e d0       	rcall	.+28     	; 0x1ace <__divmodsi4_neg1>
    1ab2:	57 fd       	sbrc	r21, 7
    1ab4:	04 d0       	rcall	.+8      	; 0x1abe <__divmodsi4_neg2>
    1ab6:	d7 df       	rcall	.-82     	; 0x1a66 <__udivmodsi4>
    1ab8:	0a d0       	rcall	.+20     	; 0x1ace <__divmodsi4_neg1>
    1aba:	00 1c       	adc	r0, r0
    1abc:	38 f4       	brcc	.+14     	; 0x1acc <__divmodsi4_exit>

00001abe <__divmodsi4_neg2>:
    1abe:	50 95       	com	r21
    1ac0:	40 95       	com	r20
    1ac2:	30 95       	com	r19
    1ac4:	21 95       	neg	r18
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	4f 4f       	sbci	r20, 0xFF	; 255
    1aca:	5f 4f       	sbci	r21, 0xFF	; 255

00001acc <__divmodsi4_exit>:
    1acc:	08 95       	ret

00001ace <__divmodsi4_neg1>:
    1ace:	f6 f7       	brtc	.-4      	; 0x1acc <__divmodsi4_exit>
    1ad0:	90 95       	com	r25
    1ad2:	80 95       	com	r24
    1ad4:	70 95       	com	r23
    1ad6:	61 95       	neg	r22
    1ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ada:	8f 4f       	sbci	r24, 0xFF	; 255
    1adc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ade:	08 95       	ret

00001ae0 <_exit>:
    1ae0:	f8 94       	cli

00001ae2 <__stop_program>:
    1ae2:	ff cf       	rjmp	.-2      	; 0x1ae2 <__stop_program>
